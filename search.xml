<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[JDK源码调试并显示变量信息]]></title>
      <url>http://facingsea.com/2016/06/28/java-jdk-debug-and-show-variable-info/</url>
      <content type="html"><![CDATA[<p>在调试程序时，如果进入JDK源码后，会发现源码中的变量是无法显示具体值的，这是因为JDK在打包时默认去除了debug的信息，来减少jar包的大小。</p>
<p>下面可以自己手动编译（使用系统：windows10，JDK：1.8.0_60）：</p>
<h2 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h2><p>新创建一个目录，如<code>E:\tmp</code>，在tmp目录中，创建存放源码的<code>jdk8_src</code>和输出信息的<code>jdk8_debug</code>两个目录。</p>
<h2 id="拷贝JDK源码"><a href="#拷贝JDK源码" class="headerlink" title="拷贝JDK源码"></a>拷贝JDK源码</h2><p>从<code>JDK_HOME</code>中拿到<code>src.zip</code>，并将其解压到<code>jdk8_src</code>，此时目录结构为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- E:\tmp</span><br><span class="line">-      jdk8_src\</span><br><span class="line">-          com\...</span><br><span class="line">-          java\...</span><br><span class="line">-          javax\...</span><br><span class="line">-          launcher\...</span><br><span class="line">-          org\...</span><br><span class="line">-      jdk8_debug\</span><br></pre></td></tr></table></figure></p>
<p>可以从中挑选一部分来编译，比如<code>java/</code>和<code>javax/</code>，这里暂时先编译全部。</p>
<h2 id="拷贝依赖jar"><a href="#拷贝依赖jar" class="headerlink" title="拷贝依赖jar"></a>拷贝依赖jar</h2><p>从<code>JDK_HOME\jre\lib</code>下找到<code>rt.jar</code>，将其拷贝到<code>tmp/</code>目录下。</p>
<h2 id="生成需编译文件列表"><a href="#生成需编译文件列表" class="headerlink" title="生成需编译文件列表"></a>生成需编译文件列表</h2><p>在<code>tmp</code>目录下，打开cmd（按着<code>shift</code>键，然后右键，选择<code>在此处打开命令窗口</code>），执行以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir /B /S /X jdk8_src\*.java &gt; filelist.txt</span><br></pre></td></tr></table></figure></p>
<p>该命令主要是将所要编译的java文件列表写入到当前目录的filelist.txt文件中。</p>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>执行以下<code>javac</code>命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac -J-Xms16m -J-Xmx1024m -sourcepath E:\tmp\jdk8_src -cp E:\tmp\rt.jar <span class="_">-d</span> E:\tmp\jdk8_debug -g @filelist.txt &gt;&gt; log.txt 2&gt;&amp;1</span><br></pre></td></tr></table></figure></p>
<p>该命令将会把编译后的所有文件放到<code>jdk8_debug</code>目录中，并在<code>tmp</code>目录下生成<code>log.txt</code>来存放编译的结果信息，打开该文件，忽略前面的警告信息，会发现文件的最后出现许多类似以下错误信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">E:\tmp\jdk8_src\com\sun\java\swing\plaf\gtk\GTKLookAndFeel.java:45: 错误: 找不到符号</span><br><span class="line">import sun.awt.UNIXToolkit;</span><br><span class="line">              ^</span><br><span class="line">  符号:   类 UNIXToolkit</span><br><span class="line">  位置: 程序包 sun.awt</span><br><span class="line">E:\tmp\jdk8_src\com\sun\java\swing\plaf\gtk\GTKStyle.java:37: 错误: 找不到符号</span><br><span class="line">import sun.awt.UNIXToolkit;</span><br><span class="line">              ^</span><br><span class="line">  符号:   类 UNIXToolkit</span><br><span class="line">  位置: 程序包 sun.awt</span><br></pre></td></tr></table></figure></p>
<p>查看所有错误，会发现都是<code>com</code>包下的，最简单的方式就是删除<code>jdk8_src</code>目录下的<code>com</code>目录，重新执行上面的<code>生成需编译文件列表</code>和<code>编译</code>两个步骤即可编译成功。<br>如果不想删除整个<code>com</code>目录，可以考虑删除对应报错的文件，下面列出出错的文件目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">E:\tmp\jdk8_src\com\sun\java\swing\plaf\gtk\GTKLookAndFeel.java</span><br><span class="line">E:\tmp\jdk8_src\com\sun\java\swing\plaf\gtk\GTKStyle.java</span><br><span class="line">E:\tmp\jdk8_src\com\sun\java\swing\plaf\gtk\GTKPainter.java</span><br><span class="line">E:\tmp\jdk8_src\com\sun\java\swing\plaf\gtk\PangoFonts.java</span><br><span class="line">E:\tmp\jdk8_src\com\sun\source\util\JavacTask.java</span><br><span class="line">E:\tmp\jdk8_src\com\sun\java\swing\plaf\gtk\GTKEngine.java</span><br></pre></td></tr></table></figure></p>
<p>从目录结构中可以看出，报错的基本都是<code>swing</code>包下<code>gtk</code>相关的，熟悉<code>linux</code>应该都知道<code>gtk</code>是<code>GNU/Linux</code>下开发图形界面的应用程序的主流开发工具之一，在<code>windows</code>下不需要这些，可以<strong>手动删除整个<code>gtk</code>包</strong>。<br>还有一个是<code>JavacTask.java</code>，根据该文件中的类注释：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Provides access to functionality specific to the JDK Java Compiler, javac.</span><br></pre></td></tr></table></figure></p>
<p>可理解为提供了访问JDK中Java编译器的指定功能，根据错误信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E:\tmp\jdk8_src\com\sun\source\util\JavacTask.java:40: 错误: 程序包com.sun.tools.javac.api不存在</span><br><span class="line">import com.sun.tools.javac.api.BasicJavacTask;</span><br></pre></td></tr></table></figure></p>
<p>可以看出应该是<code>com.sun</code>包中某些类已经被移除，才导致的报错，由于该类被引用的很多，只删除该文件肯定还是会报错的，这里可以这样做：</p>
<blockquote>
<ol>
<li>从<code>JDK_HOME\jre\lib</code>下找到<code>tools.jar</code>，将其拷贝到<code>tmp/</code>目录下，这时该目录下有两个jar：<code>rt.jar</code>和<code>tools.jar</code>。</li>
<li>删除之前生成的<code>filelist.txt</code>和<code>log.txt</code>两个文件（因为之前删除了<code>gtk</code>包，列表需要重新生成）</li>
<li>重新生成<code>filelist.txt</code>，参见步骤5。</li>
<li>重新执行<code>javac</code>命令，并加入新引入的<code>tools.jar</code>包：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac -J-Xms16m -J-Xmx1024m -sourcepath E:\tmp\jdk8_src -cp E:\tmp\rt.jar;E:\tmp\tools.jar <span class="_">-d</span> E:\tmp\jdk8_debug -g @filelist.txt &gt;&gt; log.txt 2&gt;&amp;1</span><br></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<p>执行完后，查看<code>log.txt</code>，可以看出没了错误信息，只剩下警告信息。进入<code>jdk8_debug</code>目录，可以看到该目录下已经有了编译好的class文件。</p>
<h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>使用cmd进入<code>jdk8_debug</code>目录，执行打包命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar cf0 rt_debug.jar *</span><br></pre></td></tr></table></figure></p>
<p>该命令生成的rt_debug.jar包就是带有debug信息的rt包。</p>
<h2 id="加入到JDK下"><a href="#加入到JDK下" class="headerlink" title="加入到JDK下"></a>加入到JDK下</h2><p>拷贝<code>rt_debug.jar</code>文件到<code>JDK_HOME\jre\lib\endorsed</code>，如果<code>endorsed</code>目录不存在就新建一个。</p>
<p>现在已经完成所有的编译工作，可以使用eclipse来调试了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://stackoverflow.com/questions/18255474/debug-jdk-source-cant-watch-variable-what-it-is/18255852#18255852" target="_blank" rel="external">debug jdk source can’t watch variable what it is</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MongoDB 3.x 创建用户]]></title>
      <url>http://facingsea.com/2016/06/26/mongodb-3-user-db/</url>
      <content type="html"><![CDATA[<blockquote>
<p>请先安装好MongoDB 3</p>
</blockquote>
<h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p>不用<code>--auth</code>参数启动MongoDB服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\dev\mongodb\bin\mongod.exe --dbpath D:\dev\mongodb\data\db</span><br></pre></td></tr></table></figure></p>
<h2 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h2><p>使用客户端连接：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\dev\mongodb\bin\mongo.exe</span><br></pre></td></tr></table></figure></p>
<p>执行<code>show dbs</code>后，会发现只有一个<code>local</code>库</p>
<h2 id="创建管理员用户"><a href="#创建管理员用户" class="headerlink" title="创建管理员用户"></a>创建管理员用户</h2><p>添加一个具有<code>userAdminAnyDatabase</code>角色的用户，把他作为数据库的管理员。如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line"></span><br><span class="line">db.createUser(&#123;</span><br><span class="line">    user: <span class="string">"root"</span>, </span><br><span class="line">    <span class="built_in">pwd</span>: <span class="string">"1234"</span>, </span><br><span class="line">    roles: [&#123;role: <span class="string">"userAdminAnyDatabase"</span>, db: <span class="string">"admin"</span>&#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>以上创建了用户root，密码为1234，操作的数据库为admin。</p>
<blockquote>
<p><code>roles</code>中的<code>db</code>属性用于指定该用户所要操作的数据库，必须有，不然会报错。</p>
</blockquote>
<p>此时可以通过<code>show users</code>（必须在admin数据库下）或<code>db.system.users.find()</code>来查看新建的用户：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.system.users.<span class="function"><span class="title">find</span></span>()</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="string">"admin.root"</span>, <span class="string">"user"</span> : <span class="string">"root"</span>, <span class="string">"db"</span> : <span class="string">"admin"</span>, <span class="string">"credentials"</span> : &#123; <span class="string">"SCRAM-SHA-1"</span> : &#123; <span class="string">"iterationCount"</span> : 10000, <span class="string">"salt"</span> : <span class="string">"veRFyPTSy7YeTjgJ0II5cw=="</span>, <span class="string">"storedKey"</span> : <span class="string">"L8w3oCwXAf/0fBtYDzFd90w0h7o="</span>, <span class="string">"serverKey"</span> : <span class="string">"w+D2G7InpC+feDCKCFfHRFRgw+g="</span> &#125; &#125;, <span class="string">"roles"</span> : [ &#123; <span class="string">"role"</span> : <span class="string">"userAdminAnyDatabase"</span>, <span class="string">"db"</span> : <span class="string">"admin"</span> &#125; ] &#125;</span><br><span class="line">&gt; show users</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"_id"</span> : <span class="string">"admin.root"</span>,</span><br><span class="line">    <span class="string">"user"</span> : <span class="string">"root"</span>,</span><br><span class="line">    <span class="string">"db"</span> : <span class="string">"admin"</span>,</span><br><span class="line">    <span class="string">"roles"</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"role"</span> : <span class="string">"userAdminAnyDatabase"</span>,</span><br><span class="line">            <span class="string">"db"</span> : <span class="string">"admin"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其他角色参见：<a href="https://docs.mongodb.com/manual/core/security-built-in-roles/" target="_blank" rel="external">Built-In Roles</a></p>
<h2 id="以认证方式重启"><a href="#以认证方式重启" class="headerlink" title="以认证方式重启"></a>以认证方式重启</h2><p>添加<code>--auth</code>参数启动<code>mongod</code>服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\dev\mongodb\bin\mongod.exe --auth --dbpath D:\dev\mongodb\data\db</span><br></pre></td></tr></table></figure></p>
<h2 id="管理员登录"><a href="#管理员登录" class="headerlink" title="管理员登录"></a>管理员登录</h2><p>客户端有两种登录方式：<br>1、按之前的方式直接登录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">D:\dev\mongodb\bin&gt;mongo.exe</span><br><span class="line">MongoDB shell version: 3.2.7-44-ge9746ac</span><br><span class="line">connecting to: <span class="built_in">test</span></span><br><span class="line">&gt; show dbs</span><br><span class="line">2016-06-26T17:08:23.299+0800 E QUERY    [thread1] Error: listDatabases failed:&#123;</span><br><span class="line">        <span class="string">"ok"</span> : 0,</span><br><span class="line">        <span class="string">"errmsg"</span> : <span class="string">"not authorized on admin to execute command &#123; listDatabases: 1.0 &#125;"</span>,</span><br><span class="line">        <span class="string">"code"</span> : 13</span><br><span class="line">&#125; :</span><br><span class="line">_getErrorWithCode@src/mongo/shell/utils.js:25:13</span><br><span class="line">Mongo.prototype.getDBs@src/mongo/shell/mongo.js:62:1</span><br><span class="line">shellHelper.show@src/mongo/shell/utils.js:761:19</span><br><span class="line">shellHelper@src/mongo/shell/utils.js:651:15</span><br><span class="line">@(shellhelp2):1:1</span><br></pre></td></tr></table></figure></p>
<p>可以发现，现在能够进入数据库，但是无法执行其他操作，这时就需要使用<code>db.auth(name, pwd)</code>来认证：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.auth(<span class="string">"root"</span>, <span class="string">"1234"</span>)</span><br><span class="line">1</span><br></pre></td></tr></table></figure></p>
<p>返回<code>1</code>表示成功。</p>
<p>2、通过添加<code>-u &lt;username&gt;</code>、<code>-p &lt;password&gt;</code>、<code>--authenticationDatabase &lt;database&gt;</code>启动参数直接认证：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo.exe --port 27017 -u <span class="string">"root"</span> -p <span class="string">"1234"</span> --authenticationDatabase <span class="string">"admin"</span></span><br></pre></td></tr></table></figure></p>
<p>当通过以上两种方式登录后，发现操作还是报错，这是正常的，因为<code>userAdminAnyDatabase</code>角色只是用来管理用户的，并没有操作数据库的权限。</p>
<h2 id="创建其他用户"><a href="#创建其他用户" class="headerlink" title="创建其他用户"></a>创建其他用户</h2><p>创建用户需要以下权限：</p>
<pre><code>* 对于目标数据库，需要有`createUser`的权限
* 需要有`grantRole`权限，以便给用户分配角色
</code></pre><p>MongoDB中自带的<code>userAdmin</code>和<code>userAdminAnyDatabase</code>两个角色拥有<code>createUser</code>和<code>grantRole</code>权限，所以之前添加的root用户可以创建用户。<br>如，给数据库<strong>script</strong>创建用户<strong>script_user</strong>，并且该用户对数据库<strong>report</strong>有read权限：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">use script</span><br><span class="line">db.createUser(&#123;</span><br><span class="line">    user: <span class="string">"script_user"</span>, </span><br><span class="line">    <span class="built_in">pwd</span>: <span class="string">"1234"</span>, </span><br><span class="line">    roles: [</span><br><span class="line">        &#123;role: <span class="string">"readWrite"</span>, db: <span class="string">"script"</span>&#125;, </span><br><span class="line">        &#123;role: <span class="string">"read"</span>, db: <span class="string">"report"</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>查看用户：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; show users</span><br><span class="line">&#123;</span><br><span class="line">    "_id" : "script.script_user",</span><br><span class="line">    "user" : "script_user",</span><br><span class="line">    "db" : "script",</span><br><span class="line">    "roles" : [</span><br><span class="line">        &#123;</span><br><span class="line">            "role" : "readWrite",</span><br><span class="line">            "db" : "script"</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>切换为<code>script</code>数据库及使用<code>script_user</code>用户：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.auth(<span class="string">"script_user"</span>, <span class="string">"1234"</span>)</span><br><span class="line">&gt; use script</span><br><span class="line">switched to db script</span><br></pre></td></tr></table></figure></p>
<p>此时，用户<code>script_user</code>就可以操作<code>script</code>数据库了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>1、Add Users：<a href="https://docs.mongodb.com/manual/tutorial/create-users/" target="_blank" rel="external">https://docs.mongodb.com/manual/tutorial/create-users/</a><br>1、Enable Client Access Control：<a href="https://docs.mongodb.com/manual/tutorial/enable-authentication/" target="_blank" rel="external">https://docs.mongodb.com/manual/tutorial/enable-authentication/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java没有引用传递，只有值传递]]></title>
      <url>http://facingsea.com/2016/06/26/java-no-transfer-reference-just-value/</url>
      <content type="html"><![CDATA[<blockquote>
<p>之前一直以为Java中除了基本类型外都是引用传递，最近才发现并不是这样，Java中只有值传递，没有引用传递！</p>
</blockquote>
<p>下面来分类看一下：</p>
<h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p>Java中基本类型分为三类：数值类型、字符类型（char）、布尔类型（boolean），数值类型又分为整数型和浮点型。整数型包括byte、short、int、long，浮点型包括float、double，字符类型对应char，布尔类型就是所谓的true和false。<br>先看以下程序（使用Junit测试）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIntPassing</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    processInt(num);</span><br><span class="line">    System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processInt</span><span class="params">(<span class="keyword">int</span> param)</span></span>&#123;</span><br><span class="line">    param = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行结果为<code>0</code>，可以看出在<code>processInt</code>方法中的赋值其实是不影响原值<code>num</code>的，</p>
<p><code>num</code>作为参数传递给<code>processInt()</code>方法时，是将内存空间中num所指向的那个<strong>存储单元中存放的值</strong>，即<code>0</code>,传送给了<code>processInt()</code>方法中的<code>param</code>变量，而这个<code>param</code>变量<strong>也在内存空间中分配了一个存储单元</strong>，这个时候，就把<code>num</code>的值<code>0</code>传送给了这个存储单元中。此后，在<code>processInt()</code>方法中对<code>param</code>的一切操作都是针对<code>param</code>所指向的这个存储单元，与<code>num</code>所指向的那个存储单元没有关系了！<br>自然，在函数调用之后，<code>num</code>所指向的存储单元的值还是没有发生变化，这就是所谓的“值传递”！值传递的精髓是：<strong>传递的是存储单元中的内容，而非地址或者引用！</strong></p>
<h2 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h2><p>首先来看程序：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">"jack"</span>;</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(<span class="string">"old: "</span> + person.name);</span><br><span class="line">        changeName(person);</span><br><span class="line">        System.out.println(<span class="string">"new: "</span> + person.name);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">changeName</span><span class="params">(Person p)</span></span>&#123;</span><br><span class="line">        p.name = <span class="string">"rose"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">old: jack</span><br><span class="line">new: rose</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>Java 编程语言只有值传递参数。当一个对象实例作为一个参数被传递到方法中时，参数的值就是<strong>该对象引用的一个副本</strong>。指向同一个对象,对象的内容可以在被调用的方法中改变，但对象的引用(不是引用的副本)是永远不会改变的。 </p>
</blockquote>
<p>下面借助图来说明一下：<br><img src="/assert/java-no-transfer-reference-just-value/object-passing-descript.png" alt=""></p>
<p>主函数中new了一个对象<code>Person</code>，实际分配了两个对象：新创建的<code>Person</code>类的实体对象，和指向该对象的引用变量<code>person</code>。</p>
<blockquote>
<p>注意：在java中，新创建的实体对象在堆内存中开辟空间，而引用变量在栈内存中开辟空间</p>
</blockquote>
<p>正如如上图所示，左侧是堆空间，用来分配内存给新创建的实体对象，红色框是新建的<code>Person</code>类的实体对象，<code>000012</code>是该实体对象的起始地址；而右侧是栈空间，用来给引用变量和一些临时变量分配内存，新实体对象的引用<code>person</code>就在其中，可以看到它的存储单元的内容是<code>000012</code>，记录的正是新建<code>Person</code>类实体对象的起始地址，也就是说它指向该实体对象。<br>这时候，好戏上台了：<br>调用了<code>changeName()</code>方法，<code>person</code>作为对象参数传入该方法，但是大家特别注意，它传入的是什么！！！<code>person</code>引用变量将自己的存储单元的内容传给了<code>changeName()</code>方法的<code>p</code>变量！也就是将实体对象的地址传给了<code>p</code>变量，从此，在<code>changeName()</code>方法中对<code>p</code>的一切操作都是针对<code>p</code>所指向的这个存储单元，与<code>person</code>引用变量所指向的那个存储单元再没有关系了！<br>回顾一下上面的一个值传递的例子，值传递，就是将存储单元中的内容传给调用函数中的那个参数，这里是不是异曲同工，是所谓“值传递”，而非“引用传递”！</p>
<p>那为什么对象内部能够发生变化呢？<br>那是因为：<code>p</code>所指向的那个存储单元中的内容是实体对象的地址，使得<code>p</code>也指向了该实体对象，所以才能改变对象内部的属性！<br>这也是我们大多数人会误以为是“引用传递”的终极原因！</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>1、<a href="http://guhanjie.iteye.com/blog/1683637" target="_blank" rel="external">Java中只有按值传递，没有按引用传递</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MongoDB初步使用]]></title>
      <url>http://facingsea.com/2016/06/25/mongodb-step-in/</url>
      <content type="html"><![CDATA[<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>创建数据库是通过use关键字：use [databaseName]，如： <code>use foobar;</code>此时并没有真正的创建foobar这个数据库，而是在mongodb的缓存中存在这个数据库，如果此时什么都不做关闭的话，这个空的数据库就会被删除。只有真正的为foobar添加List（模板数据）时，这个数据库才真正的创建。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; show dbs</span><br><span class="line"><span class="built_in">local</span>  0.000GB</span><br><span class="line">&gt; use foobar</span><br><span class="line">switched to db foobar</span><br><span class="line">&gt; show dbs</span><br><span class="line"><span class="built_in">local</span>  0.000GB</span><br></pre></td></tr></table></figure></p>
<h2 id="操作数据"><a href="#操作数据" class="headerlink" title="操作数据"></a>操作数据</h2><p>使用方式：<code>db.[documentName].[action]({key:value, key:value…..})</code>其中，<code>db</code>指的是当前创建的数据库<code>foobar</code>，<code>documentName</code>是要操作的文档（类似于关系型数据库的表），这个文档可以不存在，没有的话，会自动创建。<code>action</code>指的是具体的操作，如<code>insert</code>。（）括号里的数据是bson数据，类似于json格式，如命令：<code>db.persons.insert({name:”zhangsan”, sex:”male”})</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.persons.insert(&#123;name:<span class="string">"zhangsan"</span>, sex:<span class="string">"male"</span>&#125;)</span><br><span class="line">WriteResult(&#123; <span class="string">"nInserted"</span> : 1 &#125;)</span><br><span class="line">&gt; show dbs</span><br><span class="line">foobar  0.000GB</span><br><span class="line"><span class="built_in">local</span>   0.000GB</span><br></pre></td></tr></table></figure></p>
<h2 id="查看文档"><a href="#查看文档" class="headerlink" title="查看文档"></a>查看文档</h2><p>命令： <code>show collections</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; show collections</span><br><span class="line">persons</span><br></pre></td></tr></table></figure></p>
<h2 id="查询文档数据"><a href="#查询文档数据" class="headerlink" title="查询文档数据"></a>查询文档数据</h2><p>查询所有： <code>db.[tableName].find()</code><br>查询第一条数据： <code>db.[tableName].findOne()</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.persons.<span class="function"><span class="title">find</span></span>()</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"576e2b94fad07874af073963"</span>), <span class="string">"name"</span> : <span class="string">"zhangsan"</span>, <span class="string">"sex"</span> : <span class="string">"male"</span> &#125;</span><br><span class="line">&gt; db.persons.<span class="function"><span class="title">findOne</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">"_id"</span> : ObjectId(<span class="string">"576e2b94fad07874af073963"</span>),</span><br><span class="line">        <span class="string">"name"</span> : <span class="string">"zhangsan"</span>,</span><br><span class="line">        <span class="string">"sex"</span> : <span class="string">"male"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="更新文档内容"><a href="#更新文档内容" class="headerlink" title="更新文档内容"></a>更新文档内容</h2><p>命令： <code>db.[tableName].update({key1: value1}, { $set:{key2:value2}})</code><br>Key1和value2表示查询的条件，$set表示要设置的值是key2/value2<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.persons.update(&#123;name:<span class="string">"zhangsan"</span>&#125;, &#123;<span class="variable">$set</span>:&#123;sex:<span class="string">"ismale"</span>&#125;&#125;)</span><br><span class="line">WriteResult(&#123; <span class="string">"nMatched"</span> : 1, <span class="string">"nUpserted"</span> : 0, <span class="string">"nModified"</span> : 1 &#125;)</span><br><span class="line">&gt; db.persons.<span class="function"><span class="title">find</span></span>()</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"576e2b94fad07874af073963"</span>), <span class="string">"name"</span> : <span class="string">"zhangsan"</span>, <span class="string">"sex"</span> : <span class="string">"ismale"</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"576e2d33fad07874af073964"</span>), <span class="string">"name"</span> : <span class="string">"lisi"</span>, <span class="string">"sex"</span> : <span class="string">"female"</span> &#125;</span><br></pre></td></tr></table></figure></p>
<p>另一种方式:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; var p = db.persons.findOne()</span><br><span class="line">&gt; db.persons.update(p, &#123;name: <span class="string">"zhangsan01"</span>&#125;)</span><br><span class="line">WriteResult(&#123; <span class="string">"nMatched"</span> : 1, <span class="string">"nUpserted"</span> : 0, <span class="string">"nModified"</span> : 1 &#125;)</span><br><span class="line">&gt; db.persons.<span class="function"><span class="title">find</span></span>()</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"576e2b94fad07874af073963"</span>), <span class="string">"name"</span> : <span class="string">"zhangsan01"</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"576e2d33fad07874af073964"</span>), <span class="string">"name"</span> : <span class="string">"lisi"</span>, <span class="string">"sex"</span> : <span class="string">"female"</span> &#125;</span><br><span class="line">&gt; p</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">"_id"</span> : ObjectId(<span class="string">"576e2b94fad07874af073963"</span>),</span><br><span class="line">        <span class="string">"name"</span> : <span class="string">"zhangsan"</span>,</span><br><span class="line">        <span class="string">"sex"</span> : <span class="string">"ismale"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但是这种方式在修改时会只针对update后的语句进行更新，而舍弃其他字段</p>
<blockquote>
<p>注意：如果查询条件有多个符合的，那么mongodb默认只修改符合的第一条</p>
</blockquote>
<h2 id="删除文档数据"><a href="#删除文档数据" class="headerlink" title="删除文档数据"></a>删除文档数据</h2><p>命令： <code>db.[tableName].remove({………})</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.persons.<span class="function"><span class="title">find</span></span>()</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"576e2b94fad07874af073963"</span>), <span class="string">"name"</span> : <span class="string">"zhangsan01"</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"576e2d33fad07874af073964"</span>), <span class="string">"name"</span> : <span class="string">"lisi"</span>, <span class="string">"sex"</span> : <span class="string">"female"</span> &#125;</span><br><span class="line">&gt; db.persons.remove(&#123;name: <span class="string">"lisi"</span>&#125;)</span><br><span class="line">WriteResult(&#123; <span class="string">"nRemoved"</span> : 1 &#125;)</span><br><span class="line">&gt; db.persons.<span class="function"><span class="title">find</span></span>()</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"576e2b94fad07874af073963"</span>), <span class="string">"name"</span> : <span class="string">"zhangsan01"</span> &#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="删除文档集合"><a href="#删除文档集合" class="headerlink" title="删除文档集合"></a>删除文档集合</h2><p>命令： <code>db.[documentName].drop()</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; show collections</span><br><span class="line">persons</span><br><span class="line">&gt; db.persons.drop()</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">&gt; show collections</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><p>命令： <code>db.dropDatabase()</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; show dbs</span><br><span class="line">foobar  0.000GB</span><br><span class="line"><span class="built_in">local</span>   0.000GB</span><br><span class="line">&gt; db.<span class="function"><span class="title">dropDatabase</span></span>()</span><br><span class="line">&#123; <span class="string">"dropped"</span> : <span class="string">"foobar"</span>, <span class="string">"ok"</span> : 1 &#125;</span><br><span class="line">&gt; show dbs</span><br><span class="line"><span class="built_in">local</span>  0.000GB</span><br></pre></td></tr></table></figure></p>
<h2 id="shell中的help"><a href="#shell中的help" class="headerlink" title="shell中的help"></a>shell中的help</h2><p>里面所有的shell可以完成的命令帮助，全局的<code>help</code>，数据库相关的是<code>db.help()</code>，集合相关的是<code>db.[documentName].help()</code><br>help：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">help</span></span><br><span class="line">        db.help()                    <span class="built_in">help</span> on db methods</span><br><span class="line">        db.mycoll.help()             <span class="built_in">help</span> on collection methods</span><br><span class="line">        sh.help()                    sharding helpers</span><br><span class="line">        rs.help()                    replica <span class="built_in">set</span> helpers</span><br><span class="line">        <span class="built_in">help</span> admin                   administrative <span class="built_in">help</span></span><br><span class="line">        <span class="built_in">help</span> connect                 connecting to a db <span class="built_in">help</span></span><br><span class="line">        <span class="built_in">help</span> keys                    key shortcuts</span><br><span class="line">        <span class="built_in">help</span> misc                    misc things to know</span><br><span class="line">        <span class="built_in">help</span> mr                      mapreduce</span><br><span class="line"></span><br><span class="line">        show dbs                     show database names</span><br><span class="line">        show collections             show collections <span class="keyword">in</span> current database</span><br><span class="line">        show users                   show users <span class="keyword">in</span> current database</span><br><span class="line">        show profile                 show most recent system.profile entries with time &gt;= 1ms</span><br><span class="line">        show logs                    show the accessible logger names</span><br><span class="line">        show <span class="built_in">log</span> [name]              prints out the last segment of <span class="built_in">log</span> <span class="keyword">in</span> memory, <span class="string">'global'</span> is default</span><br><span class="line">        use &lt;db_name&gt;                <span class="built_in">set</span> current database</span><br><span class="line">        db.foo.find()                list objects <span class="keyword">in</span> collection foo</span><br><span class="line">        db.foo.find( &#123; a : 1 &#125; )     list objects <span class="keyword">in</span> foo <span class="built_in">where</span> a == 1</span><br><span class="line">        it                           result of the last line evaluated; use to further iterate</span><br><span class="line">        DBQuery.shellBatchSize = x   <span class="built_in">set</span> default number of items to display on shell</span><br><span class="line">        <span class="built_in">exit</span>                         quit the mongo shell</span><br></pre></td></tr></table></figure></p>
<p>db.help()：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.help()</span><br><span class="line">DB methods:</span><br><span class="line">        db.adminCommand(nameOrDocument) - switches to <span class="string">'admin'</span> db, and runs <span class="built_in">command</span> [ just calls db.runCommand(...) ]</span><br><span class="line">        db.auth(username, password)</span><br><span class="line">        db.cloneDatabase(fromhost)</span><br><span class="line">        db.commandHelp(name) returns the <span class="built_in">help</span> <span class="keyword">for</span> the <span class="built_in">command</span></span><br><span class="line">        db.copyDatabase(fromdb, todb, fromhost)</span><br><span class="line">        db.createCollection(name, &#123; size : ..., capped : ..., max : ... &#125; )</span><br><span class="line">        db.createUser(userDocument)</span><br><span class="line">        db.currentOp() displays currently executing operations <span class="keyword">in</span> the db</span><br><span class="line">        db.dropDatabase()</span><br><span class="line">        db.eval() - deprecated</span><br><span class="line">        db.fsyncLock() flush data to disk and lock server <span class="keyword">for</span> backups</span><br><span class="line">        db.fsyncUnlock() unlocks server following a db.fsyncLock()</span><br><span class="line">        db.getCollection(cname) same as db[<span class="string">'cname'</span>] or db.cname</span><br><span class="line">        db.getCollectionInfos([filter]) - returns a list that contains the names and options of the db<span class="string">'s collections</span><br><span class="line">        db.getCollectionNames()</span><br><span class="line">        db.getLastError() - just returns the err msg string</span><br><span class="line">        db.getLastErrorObj() - return full status object</span><br><span class="line">        db.getLogComponents()</span><br><span class="line">        db.getMongo() get the server connection object</span><br><span class="line">        db.getMongo().setSlaveOk() allow queries on a replication slave server</span><br><span class="line">        db.getName()</span><br><span class="line">        db.getPrevError()</span><br><span class="line">        db.getProfilingLevel() - deprecated</span><br><span class="line">        db.getProfilingStatus() - returns if profiling is on and slow threshold</span><br><span class="line">        db.getReplicationInfo()</span><br><span class="line">        db.getSiblingDB(name) get the db at the same server as this one</span><br><span class="line">        db.getWriteConcern() - returns the write concern used for any operations on this db, inherited from server object if set</span><br><span class="line">        db.hostInfo() get details about the server'</span>s host</span><br><span class="line">        db.isMaster() check replica primary status</span><br><span class="line">        db.killOp(opid) kills the current operation <span class="keyword">in</span> the db</span><br><span class="line">        db.listCommands() lists all the db commands</span><br><span class="line">        db.loadServerScripts() loads all the scripts <span class="keyword">in</span> db.system.js</span><br><span class="line">        db.logout()</span><br><span class="line">        db.printCollectionStats()</span><br><span class="line">        db.printReplicationInfo()</span><br><span class="line">        db.printShardingStatus()</span><br><span class="line">        db.printSlaveReplicationInfo()</span><br><span class="line">        db.dropUser(username)</span><br><span class="line">        db.repairDatabase()</span><br><span class="line">        db.resetError()</span><br><span class="line">        db.runCommand(cmdObj) run a database command.  <span class="keyword">if</span> cmdObj is a string, turns it into &#123; cmdObj : 1 &#125;</span><br><span class="line">        db.serverStatus()</span><br><span class="line">        db.setLogLevel(level,&lt;component&gt;)</span><br><span class="line">        db.setProfilingLevel(level,&lt;slowms&gt;) 0=off 1=slow 2=all</span><br><span class="line">        db.setWriteConcern( &lt;write concern doc&gt; ) - sets the write concern <span class="keyword">for</span> writes to the db</span><br><span class="line">        db.unsetWriteConcern( &lt;write concern doc&gt; ) - unsets the write concern <span class="keyword">for</span> writes to the db</span><br><span class="line">        db.setVerboseShell(flag) display extra information <span class="keyword">in</span> shell output</span><br><span class="line">        db.shutdownServer()</span><br><span class="line">        db.stats()</span><br><span class="line">        db.version() current version of the server</span><br></pre></td></tr></table></figure></p>
<p>集合的help：db.person.help():<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.persons.help()</span><br><span class="line">DBCollection <span class="built_in">help</span></span><br><span class="line">        db.persons.find().help() - show DBCursor <span class="built_in">help</span></span><br><span class="line">        db.persons.bulkWrite( operations, &lt;optional params&gt; ) - bulk execute write operations, optional parameters are: w, wtimeout, j</span><br><span class="line">        db.persons.count( query = &#123;&#125;, &lt;optional params&gt; ) - count the number of documents that matches the query, optional parameters are: <span class="built_in">limit</span>, skip, hint, maxTimeMS</span><br><span class="line">        db.persons.copyTo(newColl) - duplicates collection by copying all documents to newColl; no indexes are copied.</span><br><span class="line">        db.persons.convertToCapped(maxBytes) - calls &#123;convertToCapped:<span class="string">'persons'</span>, size:maxBytes&#125;&#125; <span class="built_in">command</span></span><br><span class="line">        db.persons.createIndex(keypattern[,options])</span><br><span class="line">        db.persons.createIndexes([keypatterns], &lt;options&gt;)</span><br><span class="line">        db.persons.dataSize()</span><br><span class="line">        db.persons.deleteOne( filter, &lt;optional params&gt; ) - delete first matching document, optional parameters are: w, wtimeout, j</span><br><span class="line">        db.persons.deleteMany( filter, &lt;optional params&gt; ) - delete all matching documents, optional parameters are: w, wtimeout, j</span><br><span class="line">        db.persons.distinct( key, query, &lt;optional params&gt; ) - e.g. db.persons.distinct( <span class="string">'x'</span> ), optional parameters are: maxTimeMS</span><br><span class="line">        db.persons.drop() drop the collection</span><br><span class="line">        db.persons.dropIndex(index) - e.g. db.persons.dropIndex( <span class="string">"indexName"</span> ) or db.persons.dropIndex( &#123; <span class="string">"indexKey"</span> : 1 &#125; )</span><br><span class="line">        db.persons.dropIndexes()</span><br><span class="line">        db.persons.ensureIndex(keypattern[,options]) - DEPRECATED, use createIndex() instead</span><br><span class="line">        db.persons.explain().help() - show explain <span class="built_in">help</span></span><br><span class="line">        db.persons.reIndex()</span><br><span class="line">        db.persons.find([query],[fields]) - query is an optional query filter. fields is optional <span class="built_in">set</span> of fields to return.</span><br><span class="line">                                                      e.g. db.persons.find( &#123;x:77&#125; , &#123;name:1, x:1&#125; )</span><br><span class="line">        db.persons.find(...).count()</span><br><span class="line">        db.persons.find(...).limit(n)</span><br><span class="line">        db.persons.find(...).skip(n)</span><br><span class="line">        db.persons.find(...).sort(...)</span><br><span class="line">        db.persons.findOne([query], [fields], [options], [<span class="built_in">read</span>Concern])</span><br><span class="line">        db.persons.findOneAndDelete( filter, &lt;optional params&gt; ) - delete first matching document, optional parameters are: projection, sort, maxTimeMS</span><br><span class="line">        db.persons.findOneAndReplace( filter, replacement, &lt;optional params&gt; ) - replace first matching document, optional parameters are: projection, sort, maxTimeMS, upsert, <span class="built_in">return</span>NewDocument</span><br><span class="line">        db.persons.findOneAndUpdate( filter, update, &lt;optional params&gt; ) - update first matching document, optional parameters are: projection, sort, maxTimeMS, upsert, <span class="built_in">return</span>NewDocument</span><br><span class="line">        db.persons.getDB() get DB object associated with collection</span><br><span class="line">        db.persons.getPlanCache() get query plan cache associated with collection</span><br><span class="line">        db.persons.getIndexes()</span><br><span class="line">        db.persons.group( &#123; key : ..., initial: ..., reduce : ...[, cond: ...] &#125; )</span><br><span class="line">        db.persons.insert(obj)</span><br><span class="line">        db.persons.insertOne( obj, &lt;optional params&gt; ) - insert a document, optional parameters are: w, wtimeout, j</span><br><span class="line">        db.persons.insertMany( [objects], &lt;optional params&gt; ) - insert multiple documents, optional parameters are: w, wtimeout, j</span><br><span class="line">        db.persons.mapReduce( mapFunction , reduceFunction , &lt;optional params&gt; )</span><br><span class="line">        db.persons.aggregate( [pipeline], &lt;optional params&gt; ) - performs an aggregation on a collection; returns a cursor</span><br><span class="line">        db.persons.remove(query)</span><br><span class="line">        db.persons.replaceOne( filter, replacement, &lt;optional params&gt; ) - replace the first matching document, optional parameters are: upsert, w, wtimeout, j</span><br><span class="line">        db.persons.renameCollection( newName , &lt;dropTarget&gt; ) renames the collection.</span><br><span class="line">        db.persons.runCommand( name , &lt;options&gt; ) runs a db <span class="built_in">command</span> with the given name <span class="built_in">where</span> the first param is the collection name</span><br><span class="line">        db.persons.save(obj)</span><br><span class="line">        db.persons.stats(&#123;scale: N, indexDetails: <span class="literal">true</span>/<span class="literal">false</span>, indexDetailsKey: &lt;index key&gt;, indexDetailsName: &lt;index name&gt;&#125;)</span><br><span class="line">        db.persons.storageSize() - includes free space allocated to this collection</span><br><span class="line">        db.persons.totalIndexSize() - size <span class="keyword">in</span> bytes of all the indexes</span><br><span class="line">        db.persons.totalSize() - storage allocated <span class="keyword">for</span> all data and indexes</span><br><span class="line">        db.persons.update( query, object[, upsert_bool, multi_bool] ) - instead of two flags, you can pass an object with fields: upsert, multi</span><br><span class="line">        db.persons.updateOne( filter, update, &lt;optional params&gt; ) - update the first matching document, optional parameters are: upsert, w, wtimeout, j</span><br><span class="line">        db.persons.updateMany( filter, update, &lt;optional params&gt; ) - update all matching documents, optional parameters are: upsert, w, wtimeout, j</span><br><span class="line">        db.persons.validate( &lt;full&gt; ) - SLOW</span><br><span class="line">        db.persons.getShardVersion() - only <span class="keyword">for</span> use with sharding</span><br><span class="line">        db.persons.getShardDistribution() - prints statistics about data distribution <span class="keyword">in</span> the cluster</span><br><span class="line">        db.persons.getSplitKeysForChunks( &lt;maxChunkSize&gt; ) - calculates split points over all chunks and returns splitter <span class="keyword">function</span></span><br><span class="line">        db.persons.getWriteConcern() - returns the write concern used <span class="keyword">for</span> any operations on this collection, inherited from server/db <span class="keyword">if</span> <span class="built_in">set</span></span><br><span class="line">        db.persons.setWriteConcern( &lt;write concern doc&gt; ) - sets the write concern <span class="keyword">for</span> writes to the collection</span><br><span class="line">        db.persons.unsetWriteConcern( &lt;write concern doc&gt; ) - unsets the write concern <span class="keyword">for</span> writes to the collection</span><br></pre></td></tr></table></figure></p>
<p>以上是对集合的具体操作，如：db.person.count()<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.persons.count()</span><br><span class="line">0</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Windows下安装Mongodb]]></title>
      <url>http://facingsea.com/2016/06/25/mongodb-install-on-windows/</url>
      <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>MongoDB提供了.msi和.zip两种社区版下载，参见<a href="https://www.mongodb.org/dl/win32/x86_64-2008plus-ssl?_ga=1.76096855.312951906.1466825504" target="_blank" rel="external">Download MongoDB</a>，这里我下载了.zip的格式。</p>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>.zip形式直接解压到要安装的目录，如<code>D:\dev\mongodb</code>，目录结构为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- mongodb/</span><br><span class="line">--     bin/</span><br><span class="line">--         *.exe</span><br><span class="line">--         *.pdb</span><br><span class="line">--     GNU-AGPL-3.0</span><br><span class="line">--     MPL-2</span><br><span class="line">--     README</span><br><span class="line">--     THIRD-PARTY-NOTICES</span><br></pre></td></tr></table></figure></p>
<p><code>bin/</code>下对应文件介绍：</p>
<table>
<thead>
<tr>
<th>Component Set</th>
<th>Binaries</th>
</tr>
</thead>
<tbody>
<tr>
<td>Server（服务）</td>
<td>mongod.exe</td>
</tr>
<tr>
<td>Router（路由）</td>
<td>mongos.exe</td>
</tr>
<tr>
<td>Client（客户端）</td>
<td>mongo.exe</td>
</tr>
<tr>
<td>MonitoringTools（监控工具）</td>
<td>mongostat.exe, mongotop.exe</td>
</tr>
<tr>
<td>ImportExportTools（导入导出工具）</td>
<td>mongodump.exe, mongorestore.exe, mongoexport.exe, mongoimport.exe</td>
</tr>
<tr>
<td>MiscellaneousTools（辅助工具）</td>
<td>bsondump.exe, mongofiles.exe, mongooplog.exe, mongoperf.exe</td>
</tr>
</tbody>
</table>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><h3 id="环境构建"><a href="#环境构建" class="headerlink" title="环境构建"></a>环境构建</h3><p>MongoDB需要一个目录去存放数据，默认的目录是<code>\data\db</code>，该目录需要手动创建，如目录全路径为<code>D:\dev\mongodb\data\db</code>，启动命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\dev\mongodb\bin\mongod.exe --dbpath D:\dev\mongodb\data\db</span><br></pre></td></tr></table></figure></p>
<p>如果路径中包含空格，需要用双引号括起来：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\dev\mongodb\bin\mongod.exe --dbpath <span class="string">"D:\dev\mongodb\data db"</span></span><br></pre></td></tr></table></figure></p>
<h3 id="开启MongoDB服务"><a href="#开启MongoDB服务" class="headerlink" title="开启MongoDB服务"></a>开启MongoDB服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\dev\mongodb\bin\mongod.exe</span><br></pre></td></tr></table></figure>
<h3 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h3><p>要连接MongoDB服务，需要执行<code>mongo.exe</code>命令，另外打开一个cmd，输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\dev\mongodb\bin\mongo.exe</span><br></pre></td></tr></table></figure></p>
<p>控制台输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MongoDB shell version: 3.2.7-44-ge9746ac</span><br><span class="line">connecting to: <span class="built_in">test</span></span><br><span class="line">Welcome to the MongoDB shell.</span><br><span class="line">For interactive <span class="built_in">help</span>, <span class="built_in">type</span> <span class="string">"help"</span>.</span><br><span class="line">For more comprehensive documentation, see</span><br><span class="line">        http://docs.mongodb.org/</span><br><span class="line">Questions? Try the support group</span><br><span class="line">        http://groups.google.com/group/mongodb-user</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p>
<p>表示连接成功。<br>如停止连接，可按<code>Control+C</code>。</p>
<h2 id="配置windows服务"><a href="#配置windows服务" class="headerlink" title="配置windows服务"></a>配置windows服务</h2><p>加入windows服务后，可以开机启动，很方便。<br>1、创建db和log两个目录，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\dev\mongodb\data\db</span><br><span class="line">D:\dev\mongodb\data\log</span><br></pre></td></tr></table></figure></p>
<p>2、创建配置文件<br>我们可以创建一个配置文件，该文件必须包含<code>systemLog.path</code>，其他可选配置参见：<a href="https://docs.mongodb.com/manual/reference/configuration-options/" target="_blank" rel="external">configuration-options</a>。如文件路径为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\dev\mongodb\mongod.cfg</span><br></pre></td></tr></table></figure></p>
<p>内容为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">    destination: file</span><br><span class="line">    path: D:\dev\mongodb\data\log\mongod.log</span><br><span class="line">storage:</span><br><span class="line">    dbPath: D:\dev\mongodb\data\db</span><br></pre></td></tr></table></figure></p>
<p>3、注册为服务</p>
<blockquote>
<p>以下命令需要以管理员身份打开cmd！</p>
</blockquote>
<p>命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\dev\mongodb\bin&gt;mongod.exe --config D:\dev\mongodb\mongod.cfg --install</span><br></pre></td></tr></table></figure></p>
<p>4、启动服务<br>现在启动MongoDB服务命令可以使用windows方式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start MongoDB</span><br></pre></td></tr></table></figure></p>
<p>5、停止服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net stop MongoDB</span><br></pre></td></tr></table></figure></p>
<p>如果要移除该服务，可执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\dev\mongodb\bin&gt;mongod.exe --remove</span><br></pre></td></tr></table></figure></p>
<h2 id="所遇问题"><a href="#所遇问题" class="headerlink" title="所遇问题"></a>所遇问题</h2><h3 id="系统丢失dll文件"><a href="#系统丢失dll文件" class="headerlink" title="系统丢失dll文件"></a>系统丢失dll文件</h3><p>启动时，系统报缺失<code>MSVCP140.dll</code>和<code>VCRUNTIME140.dll</code>文件<br>方案一：下载对应dll文件<br>方案二：更换老一点的版本</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>1、MongoDB: <a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/" target="_blank" rel="external">https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fork项目之后更新]]></title>
      <url>http://facingsea.com/2016/05/28/git-update-after-forked/</url>
      <content type="html"><![CDATA[<p>假如有一项目A，从A项目fork的项目B，当项目A有更新之后，项目B需要从项目A获取更新的内容，可以按以下操作：<br>1、clone项目B到本地<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> B_REPO_URL</span><br></pre></td></tr></table></figure></p>
<p>2、cd到本地B的目录，把A作为一个remote加到本地的B中（一般命名为upstream）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add upstream A_REPO_URL</span><br></pre></td></tr></table></figure></p>
<p>3、将远程项目A的相应分支pull到本地，如果有冲突需要先处理冲突<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull upstream master</span><br></pre></td></tr></table></figure></p>
<p>4、将本地的更改push到远程B<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[实现replaceAll]]></title>
      <url>http://facingsea.com/2016/05/23/js-replace-all/</url>
      <content type="html"><![CDATA[<p>js中提供了replace方法在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringObject.replace(regexp/substr,replacement)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>regexp/substr 为子字符串或正则表达式</p>
</blockquote>
<p>通过使用正则表达式来达到replaceAll的效果：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">String</span>.prototype.replaceAll = <span class="function"><span class="keyword">function</span>(<span class="params">AFindText,ARepText</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> raRegExp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(AFindText.replace(<span class="regexp">/([\(\)\[\]\&#123;\&#125;\^\$\+\-\*\?\.\"\'\|\/\\])/g</span>,<span class="string">"\\$1"</span>),<span class="string">"ig"</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">this</span>.replace(raRegExp,ARepText);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[屏蔽百度推广]]></title>
      <url>http://facingsea.com/2016/04/24/browser-remove-baidu-promotion/</url>
      <content type="html"><![CDATA[<h2 id="使用adblock-plus屏蔽百度推广"><a href="#使用adblock-plus屏蔽百度推广" class="headerlink" title="使用adblock plus屏蔽百度推广"></a>使用adblock plus屏蔽百度推广</h2><h3 id="规则过滤"><a href="#规则过滤" class="headerlink" title="规则过滤"></a>规则过滤</h3><p>添加自定义过滤规则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">baidu.com###con-ar</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git库迁移]]></title>
      <url>http://facingsea.com/2016/02/12/git-repo-migration/</url>
      <content type="html"><![CDATA[<p>有时我们需要将库迁移，如从bitbucket迁到github，可采用以下方式：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --mirror https://bitbucket.org/exampleuser/repository-to-mirror.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># Make a bare mirrored clone of the repository</span></span><br><span class="line"><span class="built_in">cd</span> repository-to-mirror.git</span><br><span class="line">git remote <span class="built_in">set</span>-url --push origin https://github.com/exampleuser/mirrored</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the push location to your mirror</span></span><br><span class="line">git push --mirror</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[eclipse部分插件安装记录]]></title>
      <url>http://facingsea.com/2015/12/25/eclipse-plugin-install-record/</url>
      <content type="html"><![CDATA[<h2 id="安装emmet"><a href="#安装emmet" class="headerlink" title="安装emmet"></a>安装emmet</h2><p>emmet是一款强大的前端提示工具，它使用仿CSS选择器的语法来生成代码，大大提高了HTML/CSS代码编写的速度。<br>按照eclipse在线安装的方式，location为<code>http://emmet.io/eclipse/updates/</code>。</p>
<h3 id="快捷键冲突"><a href="#快捷键冲突" class="headerlink" title="快捷键冲突"></a>快捷键冲突</h3><p>安装后，eclipse的删除行快捷键与emmet的match pair outward 快捷键冲突，打开eclipse -&gt; window -&gt; preferences -&gt; General -&gt; Keys， 找到对应快捷键修改即可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[更改Ubuntu引导界面背景]]></title>
      <url>http://facingsea.com/2015/12/23/ubuntu-modify-boot-background-image/</url>
      <content type="html"><![CDATA[<ol>
<li><p>把你喜欢的背景图片放入/boot/grub/目录下 例如桌面</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> cp  grub_bg.jpg   /boot/grub/</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新grub配置</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> update-grub</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[百度webuploader使用]]></title>
      <url>http://facingsea.com/2015/12/04/fe-webuploader-useage/</url>
      <content type="html"><![CDATA[<pre><code>使用版本：0.1.6
</code></pre><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>在初始化时可通过<code>WebUploader.create({...})</code>的形式创建，如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uploader = <span class="literal">null</span>, </span><br><span class="line">uploader = WebUploader.create(&#123;</span><br><span class="line">    <span class="comment">// 文件接收服务端。</span></span><br><span class="line">    server: <span class="string">"https://****.do"</span></span><br><span class="line">    <span class="comment">// 选择文件的按钮。可选。</span></span><br><span class="line">    <span class="comment">// 内部根据当前运行是创建，可能是input元素，也可能是flash.</span></span><br><span class="line">    <span class="comment">//, pick: '#fileSelectBtn'</span></span><br><span class="line">    , pick: &#123;</span><br><span class="line">        id: <span class="string">"#fileSelectBtn"</span>  <span class="comment">// 指定选择文件的按钮容器，不指定则不创建按钮</span></span><br><span class="line">        <span class="comment">//, innerHTML: "按钮1"</span></span><br><span class="line">        , button: <span class="string">'&lt;div style="width: 112px; height: 30px;"&gt;&lt;/div&gt;'</span></span><br><span class="line">        , style: <span class="string">''</span> </span><br><span class="line">        , multiple: <span class="literal">false</span> <span class="comment">// 是否开起同时选择多个文件能力</span></span><br><span class="line">    &#125;</span><br><span class="line">    , threads: <span class="number">2</span>  <span class="comment">// [可选] [默认值：3] 上传并发数。允许同时最大上传进程数。</span></span><br><span class="line">    , fileNumLimit: <span class="number">2</span>  <span class="comment">// [可选] [默认值：undefined] 验证文件总数量, 超出则不允许加入队列。</span></span><br><span class="line">    , duplicate: <span class="literal">false</span>  <span class="comment">// &#123;Boolean&#125; true：可以重复，false：不允许重复 [可选] [默认值：undefined] 去重， 根据文件名字、文件大小和最后修改时间来生成hash Key.</span></span><br><span class="line">    , auto: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>如果需要添加多个按钮，可通过<code>uploader.addButton({...});</code>，如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">uploader.addButton(&#123;</span><br><span class="line">    id: <span class="string">'#fileSelectBtn02'</span></span><br><span class="line">    , button: <span class="string">'&lt;div style="width: 112px; height: 30px;"&gt;&lt;/div&gt;'</span></span><br><span class="line">    , style: <span class="string">''</span> </span><br><span class="line">    , multiple: <span class="literal">false</span>    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="文件被加入队列之前"><a href="#文件被加入队列之前" class="headerlink" title="文件被加入队列之前"></a>文件被加入队列之前</h3><p>当文件被加入队列之前会触发<code>beforeFileQueued</code>事件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">uploader.on(<span class="string">"beforeFileQueued"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">file</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(file);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>回调中的参数file为上传的文件对象，可以通过这个file对象检查该文件是否合法。如果该回调返回值为false，则此文件不会被添加进入队列。</p>
<h3 id="一批文件添加进队列以后"><a href="#一批文件添加进队列以后" class="headerlink" title="一批文件添加进队列以后"></a>一批文件添加进队列以后</h3><p>当一批文件添加进队列以后会触发<code>filesQueued</code>事件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uploader.on(<span class="string">"filesQueued"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">file</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//console.log(file.length);</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="当有文件添加到队列时"><a href="#当有文件添加到队列时" class="headerlink" title="当有文件添加到队列时"></a>当有文件添加到队列时</h3><p>当有文件添加进来的时候会触发<code>fileQueued</code>事件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uploader.on( <span class="string">"fileQueued"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> file </span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取文件信息，构建界面</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>可以在该回调中根据file的信息构建界面。</p>
<h3 id="文件被移除队列"><a href="#文件被移除队列" class="headerlink" title="文件被移除队列"></a>文件被移除队列</h3><p>当文件被移除队列后触发<code>fileDequeued</code>事件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uploader.on(<span class="string">"fileDequeued"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">file</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"file "</span>+file.name+<span class="string">" is removed."</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="文件上传过程中进度"><a href="#文件上传过程中进度" class="headerlink" title="文件上传过程中进度"></a>文件上传过程中进度</h3><p>文件上传过程中创建进度事件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">uploader.on( <span class="string">"uploadProgress"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> file, percentage </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> item = $(<span class="string">"#"</span> + file.id),</span><br><span class="line">        msg = item.find(<span class="string">".uploader-msg"</span>),</span><br><span class="line">        percent = item.find(<span class="string">".uploader-progress-bar"</span>);</span><br><span class="line">    <span class="keyword">var</span> val = <span class="built_in">parseInt</span>(percentage * <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">var</span> per = val + <span class="string">"%"</span>;</span><br><span class="line">    msg.text(<span class="string">" - "</span> + per);</span><br><span class="line">    percent.css(<span class="string">"background"</span>, <span class="string">"#1daeeb"</span>);</span><br><span class="line">    percent.css( <span class="string">"width"</span>, per );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<pre><code>file: File对象
percentage: 上传进度，数值
</code></pre><h3 id="文件上传成功"><a href="#文件上传成功" class="headerlink" title="文件上传成功"></a>文件上传成功</h3><p>当文件上传成功时会触发<code>uploadSuccess</code>事件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uploader.on( <span class="string">"uploadSuccess"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> file, response </span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(file);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<pre><code>response: 服务端返回的数据，Object对象
</code></pre><h3 id="处理后端返回错误信息"><a href="#处理后端返回错误信息" class="headerlink" title="处理后端返回错误信息"></a>处理后端返回错误信息</h3><p>当后台校验文件后，需要将特定的信息传到前台并显示，需要结合<code>uploadAccept</code>和<code>uploadError</code>两个事件一起用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">uploader.on(<span class="string">"uploadAccept"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">obj, response, fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(response.error != <span class="literal">undefined</span> )&#123;</span><br><span class="line">        <span class="keyword">if</span>(response.error)&#123; <span class="comment">//只有失败的时候才将信息往下传</span></span><br><span class="line">            fn(response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">uploader.on( <span class="string">"uploadError"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> file, reason  </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(reason.error != <span class="literal">undefined</span> )&#123;</span><br><span class="line">        <span class="keyword">if</span>(reason.error)&#123;</span><br><span class="line">            <span class="comment">// 上传失败</span></span><br><span class="line">            <span class="comment">// 处理逻辑</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>当某个文件上传到服务端响应后，会派送<code>uploadAccept</code>事件来询问服务端响应是否有效。<code>response</code>为服务端的返回数据，json格式，如果服务端不是json格式，从ret._raw中取数据，自行解析。<code>fn</code>为回调，定义见webuploader.js中4038，在4043行触发<code>uploadAccept</code>事件时，将<code>fn</code>传到了自己定义的<code>uploader.on(&quot;uploadAccept&quot;, function(..., fn){})</code>。</p>
<h3 id="error事件"><a href="#error事件" class="headerlink" title="error事件"></a>error事件</h3><p><code>error</code>事件只是前台校验失败的显示信息。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">uploader.on(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"error"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(type);</span><br><span class="line">    <span class="keyword">if</span>(type == <span class="string">'Q_EXCEED_NUM_LIMIT'</span>)&#123;</span><br><span class="line">        top.showMsg(<span class="number">3</span>, <span class="string">'文件上传数超出限制！'</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">'Q_EXCEED_SIZE_LIMIT'</span>)&#123;</span><br><span class="line">        top.showMsg(<span class="number">3</span>, <span class="string">'文件大小超出限制！'</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">'Q_TYPE_DENIED'</span>)&#123;</span><br><span class="line">        top.showMsg(<span class="number">3</span>, <span class="string">'非法文件类型！'</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">'F_DUPLICATE'</span>)&#123;</span><br><span class="line">        top.showMsg(<span class="number">3</span>, <span class="string">'文件已存在！'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>WebUploader：<a href="http://fex.baidu.com/webuploader/doc/index.html#WebUploader_Uploader" target="_blank" rel="external">http://fex.baidu.com/webuploader/doc/index.html#WebUploader_Uploader</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql创建库及分配用户]]></title>
      <url>http://facingsea.com/2015/11/24/mysql-create-database-and-user/</url>
      <content type="html"><![CDATA[<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="comment">/*!32312 IF NOT EXISTS*/</span><span class="string">`demo_db`</span> <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8 */</span>;</span><br></pre></td></tr></table></figure>
<h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'user_name'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'password'</span>;</span><br></pre></td></tr></table></figure>
<h2 id="分配对应库的权限"><a href="#分配对应库的权限" class="headerlink" title="分配对应库的权限"></a>分配对应库的权限</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> demo_db.* <span class="keyword">to</span> <span class="string">'user_name'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'password'</span>;</span><br></pre></td></tr></table></figure>
<p>此时，权限已经分配完成，查询<code>mysql.user</code>表来查看分配情况：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select User, Host, Password from mysql.user;</span><br><span class="line">+----------------+-----------+--------------------+</span><br><span class="line">| User           | Host      | Password           |</span><br><span class="line">+----------------+-----------+--------------------+</span><br><span class="line">| root           | localhost | *abcd              |</span><br><span class="line">| root           | 127.0.0.1 | *abcd              |</span><br><span class="line">|                | localhost |                    |</span><br><span class="line">| user_name      | localhost | *abcd              |</span><br><span class="line">| user_name      | %         | *abcd              |</span><br><span class="line">+----------------+-----------+--------------------+</span><br></pre></td></tr></table></figure></p>
<p>这里给用户分配了全部权限，具体权限可查询<code>mysql.user</code>表。</p>
<h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> <span class="string">'user_name'</span>@<span class="string">'localhost'</span> = <span class="keyword">PASSWORD</span>(<span class="string">'1234'</span>);</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[docker安装mysql]]></title>
      <url>http://facingsea.com/2015/08/13/docker-install-mysql/</url>
      <content type="html"><![CDATA[<h2 id="下载mysql"><a href="#下载mysql" class="headerlink" title="下载mysql"></a>下载mysql</h2><p>如下载版本5.2.26：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -c  http://cdn.mysql.com/Downloads/MySQL-5.6/mysql-5.6.26-linux-glibc2.5-x86_64.tar.gz</span><br></pre></td></tr></table></figure></p>
<p>-c 表示下载中断可以续传</p>
<h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><p>一般情况下，将mysql安装到/usr/local/mysql下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf Mysql-*.tar.gz </span><br><span class="line">mv Mysql-* /usr/<span class="built_in">local</span>/mysql</span><br></pre></td></tr></table></figure></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>由于是在docker环境下，没有必要再为mysql创建用户及用户组，直接用root即可<br>执行命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mysql/scripts/mysql_install_db --user=root</span><br></pre></td></tr></table></figure></p>
<p>输出信息为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">Installing MySQL system tables...2015-08-13 14:47:13 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_<span class="keyword">for</span>_timestamp server option (see documentation <span class="keyword">for</span> more details).</span><br><span class="line">2015-08-13 14:47:13 0 [Note] ./bin/mysqld (mysqld 5.6.26) starting as process 114 ...</span><br><span class="line">2015-08-13 14:47:13 114 [Note] InnoDB: Using atomics to ref count buffer pool pages</span><br><span class="line">2015-08-13 14:47:13 114 [Note] InnoDB: The InnoDB memory heap is disabled</span><br><span class="line">2015-08-13 14:47:13 114 [Note] InnoDB: Mutexes and rw_locks use GCC atomic builtins</span><br><span class="line">2015-08-13 14:47:13 114 [Note] InnoDB: Memory barrier is not used</span><br><span class="line">2015-08-13 14:47:13 114 [Note] InnoDB: Compressed tables use zlib 1.2.3</span><br><span class="line">2015-08-13 14:47:13 114 [Note] InnoDB: Using Linux native AIO</span><br><span class="line">2015-08-13 14:47:13 114 [Note] InnoDB: Using CPU crc32 instructions</span><br><span class="line">2015-08-13 14:47:13 114 [Note] InnoDB: Initializing buffer pool, size = 128.0M</span><br><span class="line">2015-08-13 14:47:13 114 [Note] InnoDB: Completed initialization of buffer pool</span><br><span class="line">2015-08-13 14:47:13 114 [Note] InnoDB: The first specified data file ./ibdata1 did not exist: a new database to be created!</span><br><span class="line">2015-08-13 14:47:13 114 [Note] InnoDB: Setting file ./ibdata1 size to 12 MB</span><br><span class="line">2015-08-13 14:47:13 114 [Note] InnoDB: Database physically writes the file full: wait...</span><br><span class="line">2015-08-13 14:47:14 114 [Note] InnoDB: Setting <span class="built_in">log</span> file ./ib_logfile101 size to 48 MB</span><br><span class="line">2015-08-13 14:47:18 114 [Note] InnoDB: Setting <span class="built_in">log</span> file ./ib_logfile1 size to 48 MB</span><br><span class="line">2015-08-13 14:47:20 114 [Note] InnoDB: Renaming <span class="built_in">log</span> file ./ib_logfile101 to ./ib_logfile0</span><br><span class="line">2015-08-13 14:47:20 114 [Warning] InnoDB: New <span class="built_in">log</span> files created, LSN=45781</span><br><span class="line">2015-08-13 14:47:20 114 [Note] InnoDB: Doublewrite buffer not found: creating new</span><br><span class="line">2015-08-13 14:47:21 114 [Note] InnoDB: Doublewrite buffer created</span><br><span class="line">2015-08-13 14:47:21 114 [Note] InnoDB: 128 rollback segment(s) are active.</span><br><span class="line">2015-08-13 14:47:21 114 [Warning] InnoDB: Creating foreign key constraint system tables.</span><br><span class="line">2015-08-13 14:47:21 114 [Note] InnoDB: Foreign key constraint system tables created</span><br><span class="line">2015-08-13 14:47:21 114 [Note] InnoDB: Creating tablespace and datafile system tables.</span><br><span class="line">2015-08-13 14:47:21 114 [Note] InnoDB: Tablespace and datafile system tables created.</span><br><span class="line">2015-08-13 14:47:21 114 [Note] InnoDB: Waiting <span class="keyword">for</span> purge to start</span><br><span class="line">2015-08-13 14:47:21 114 [Note] InnoDB: 5.6.26 started; <span class="built_in">log</span> sequence number 0</span><br><span class="line">2015-08-13 14:47:28 114 [Note] Binlog end</span><br><span class="line">2015-08-13 14:47:28 114 [Note] InnoDB: FTS optimize thread exiting.</span><br><span class="line">2015-08-13 14:47:28 114 [Note] InnoDB: Starting shutdown...</span><br><span class="line">2015-08-13 14:47:29 114 [Note] InnoDB: Shutdown completed; <span class="built_in">log</span> sequence number 1625977</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">Filling <span class="built_in">help</span> tables...2015-08-13 14:47:29 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_<span class="keyword">for</span>_timestamp server option (see documentation <span class="keyword">for</span> more details).</span><br><span class="line">2015-08-13 14:47:29 0 [Note] ./bin/mysqld (mysqld 5.6.26) starting as process 137 ...</span><br><span class="line">2015-08-13 14:47:29 137 [Note] InnoDB: Using atomics to ref count buffer pool pages</span><br><span class="line">2015-08-13 14:47:29 137 [Note] InnoDB: The InnoDB memory heap is disabled</span><br><span class="line">2015-08-13 14:47:29 137 [Note] InnoDB: Mutexes and rw_locks use GCC atomic builtins</span><br><span class="line">2015-08-13 14:47:29 137 [Note] InnoDB: Memory barrier is not used</span><br><span class="line">2015-08-13 14:47:29 137 [Note] InnoDB: Compressed tables use zlib 1.2.3</span><br><span class="line">2015-08-13 14:47:29 137 [Note] InnoDB: Using Linux native AIO</span><br><span class="line">2015-08-13 14:47:29 137 [Note] InnoDB: Using CPU crc32 instructions</span><br><span class="line">2015-08-13 14:47:29 137 [Note] InnoDB: Initializing buffer pool, size = 128.0M</span><br><span class="line">2015-08-13 14:47:29 137 [Note] InnoDB: Completed initialization of buffer pool</span><br><span class="line">2015-08-13 14:47:29 137 [Note] InnoDB: Highest supported file format is Barracuda.</span><br><span class="line">2015-08-13 14:47:29 137 [Note] InnoDB: 128 rollback segment(s) are active.</span><br><span class="line">2015-08-13 14:47:29 137 [Note] InnoDB: Waiting <span class="keyword">for</span> purge to start</span><br><span class="line">2015-08-13 14:47:29 137 [Note] InnoDB: 5.6.26 started; <span class="built_in">log</span> sequence number 1625977</span><br><span class="line">2015-08-13 14:47:29 137 [Note] Binlog end</span><br><span class="line">2015-08-13 14:47:29 137 [Note] InnoDB: FTS optimize thread exiting.</span><br><span class="line">2015-08-13 14:47:29 137 [Note] InnoDB: Starting shutdown...</span><br><span class="line">2015-08-13 14:47:31 137 [Note] InnoDB: Shutdown completed; <span class="built_in">log</span> sequence number 1625987</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">To start mysqld at boot time you have to copy</span><br><span class="line">support-files/mysql.server to the right place <span class="keyword">for</span> your system</span><br><span class="line"></span><br><span class="line">PLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !</span><br><span class="line">To <span class="keyword">do</span> so, start the server, <span class="keyword">then</span> issue the following commands:</span><br><span class="line"></span><br><span class="line">  ./bin/mysqladmin -u root password <span class="string">'new-password'</span></span><br><span class="line">  ./bin/mysqladmin -u root -h ubuntu14 password <span class="string">'new-password'</span></span><br><span class="line"></span><br><span class="line">Alternatively you can run:</span><br><span class="line"></span><br><span class="line">  ./bin/mysql_secure_installation</span><br><span class="line"></span><br><span class="line"><span class="built_in">which</span> will also give you the option of removing the <span class="built_in">test</span></span><br><span class="line">databases and anonymous user created by default.  This is</span><br><span class="line">strongly recommended <span class="keyword">for</span> production servers.</span><br><span class="line"></span><br><span class="line">See the manual <span class="keyword">for</span> more instructions.</span><br><span class="line"></span><br><span class="line">You can start the MySQL daemon with:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cd</span> . ; ./bin/mysqld_safe &amp;</span><br><span class="line"></span><br><span class="line">You can <span class="built_in">test</span> the MySQL daemon with mysql-test-run.pl</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cd</span> mysql-test ; perl mysql-test-run.pl</span><br><span class="line"></span><br><span class="line">Please report any problems at http://bugs.mysql.com/</span><br><span class="line"></span><br><span class="line">The latest information about MySQL is available on the web at</span><br><span class="line"></span><br><span class="line">  http://www.mysql.com</span><br><span class="line"></span><br><span class="line">Support MySQL by buying support/licenses at http://shop.mysql.com</span><br><span class="line"></span><br><span class="line">New default config file was created as ./my.cnf and</span><br><span class="line">will be used by default by the server when you start it.</span><br><span class="line">You may edit this file to change server settings</span><br></pre></td></tr></table></figure></p>
<p>可能会出现找不到<code>libaio</code>依赖的错误，执行安装即可：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install libaio1</span><br></pre></td></tr></table></figure></p>
<h2 id="启动mysql服务"><a href="#启动mysql服务" class="headerlink" title="启动mysql服务"></a>启动mysql服务</h2><p>执行如下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/mysqld_safe &amp;</span><br></pre></td></tr></table></figure></p>
<h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/mysql -u root</span><br></pre></td></tr></table></figure>
<p>刚装好时没有密码，所以可以直接登录上</p>
<h2 id="设置新密码："><a href="#设置新密码：" class="headerlink" title="设置新密码："></a>设置新密码：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/mysqladmin -u root  password <span class="string">'1234'</span></span><br></pre></td></tr></table></figure>
<p>1234为新密码</p>
<h2 id="关闭mysql服务："><a href="#关闭mysql服务：" class="headerlink" title="关闭mysql服务："></a>关闭mysql服务：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/mysqladmin -uroot -p1234 shutdown</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[docker容器不能联网的解决方案]]></title>
      <url>http://facingsea.com/2015/08/05/docker-cannot-connected-network/</url>
      <content type="html"><![CDATA[<p>在使用Ubuntu容器时，如果使用apt-get安装软件时，会提示类似如下信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E: Failed to fetch http://archive.ubuntu.com/ubuntu/pool/main/w/wheel/python-wheel_0.24.0-1~ubuntu1_all.deb  Could not resolve <span class="string">'archive.ubuntu.com'</span></span><br><span class="line"> </span><br><span class="line">E: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?</span><br></pre></td></tr></table></figure></p>
<pre><code>注：下面的方法是在容器内能ping通公网IP的解决方案，如果连公网IP都ping不通，那主机可能也上不了网（尝试`ping 8.8.8.8`）
</code></pre><h3 id="使用–net-host选项"><a href="#使用–net-host选项" class="headerlink" title="使用–net:host选项"></a>使用–net:host选项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --net:host --name ubuntu_bash -i -t ubuntu:latest /bin/bash</span><br></pre></td></tr></table></figure>
<h3 id="使用–dns选项"><a href="#使用–dns选项" class="headerlink" title="使用–dns选项"></a>使用–dns选项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --dns 8.8.8.8 --dns 8.8.4.4 --name ubuntu_bash -i -t ubuntu:latest /bin/bash</span><br></pre></td></tr></table></figure>
<h3 id="改dns-server"><a href="#改dns-server" class="headerlink" title="改dns server"></a>改dns server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/default/docker</span><br></pre></td></tr></table></figure>
<p>去掉<code>docker_OPTS=&quot;--dns 8.8.8.8 --dns 8.8.4.4&quot;</code>前的#号 （之后重启容器即可访问网络）</p>
<h3 id="不用dnsmasq"><a href="#不用dnsmasq" class="headerlink" title="不用dnsmasq"></a>不用dnsmasq</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/NetworkManager/NetworkManager.conf</span><br></pre></td></tr></table></figure>
<p>在dns=dnsmasq前加个#号注释掉<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo restart network-manager </span><br><span class="line">sudo restart docker</span><br></pre></td></tr></table></figure></p>
<h3 id="重建docker0网络（慎用）"><a href="#重建docker0网络（慎用）" class="headerlink" title="重建docker0网络（慎用）"></a>重建docker0网络（慎用）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pkill docker </span><br><span class="line">iptables -t nat -F </span><br><span class="line">ifconfig docker0 down </span><br><span class="line">brctl delbr docker0 </span><br><span class="line">docker <span class="_">-d</span></span><br></pre></td></tr></table></figure>
<p><code>iptables -t nat -F</code>可能会导致计算机中默认路由被删除，导致无法上网。</p>
<h3 id="直接在docker内修改-etc-hosts"><a href="#直接在docker内修改-etc-hosts" class="headerlink" title="直接在docker内修改/etc/hosts"></a>直接在docker内修改/etc/hosts</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[docker编译安装python2.7]]></title>
      <url>http://facingsea.com/2015/07/25/docker-compile-and-install-python2/</url>
      <content type="html"><![CDATA[<h2 id="以–net-”host”方式启动容器"><a href="#以–net-”host”方式启动容器" class="headerlink" title="以–net=”host”方式启动容器"></a>以–net=”host”方式启动容器</h2><p>这种方式能够使容器连接外网，便于在编译时下载所需的依赖<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --net=<span class="string">"host"</span> -t -i REPOSITORY:TAG /bin/bash</span><br></pre></td></tr></table></figure></p>
<h2 id="下载python源码包"><a href="#下载python源码包" class="headerlink" title="下载python源码包"></a>下载python源码包</h2><p>可以通过wget 命令来下载：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -c https://www.python.org/ftp/python/2.7.8/Python-2.7.8.tgz</span><br></pre></td></tr></table></figure></p>
<p>如果出现错误提示：无法建立ssl连接时，可以添加 <code>--no-check-certificate</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -c --no-check-certificate https://www.python.org/ftp/python/2.7.8/Python-2.7.8.tgz</span><br></pre></td></tr></table></figure></p>
<p>但是由于网络原因可能会中途没下载完就死了，建议通过p2p工具下载，如迅雷，然后通过数据卷的方式共享文件到宿主机和容器：<br>数据卷需要在启动容器的时候指定：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --net=<span class="string">"host"</span> -t -i -v /opt/share:/data/share REPOSITORY:TAG /bin/bash</span><br></pre></td></tr></table></figure></p>
<pre><code>-v：表示挂载宿主机的/opt/share目录到指定容器的/data/share目录下，两个目录之间用分号隔开
</code></pre><h2 id="执行-configure"><a href="#执行-configure" class="headerlink" title="执行./configure"></a>执行./configure</h2><p>在对python进行编译之前，必须对它进行配置。在unix/linux平台上的安装过程中，配置和编译过程全部已经自动化了，我们所需要做的就是输入几条命令然后回车即可。<br>通过执行脚本<code>./configure</code>开始编译， 这一过程可以决定系统的配置并创建相应的Makefile文件。你也可以传递一些参数选项来配置这个脚本。当这一步完成后，就可以运行make了.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/python2.7</span><br></pre></td></tr></table></figure></p>
<p><code>--prefix</code>用于指定python的安装路径于<code>/usr/local/python2.7</code>,配置完成后，我们就可以执行make操作了<br>由于python的编译需要gcc支持，所以此时如果系统中没有gcc的话，需要先安装gcc<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc</span><br></pre></td></tr></table></figure></p>
<h2 id="执行make"><a href="#执行make" class="headerlink" title="执行make"></a>执行make</h2><p>执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu$ make</span><br></pre></td></tr></table></figure></p>
<p>make编译的时间可能会比较长，大概5-6分钟，完成之后我们就可以进行安排操作了，输入指令make install(注意权限)， 如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure></p>
<p>之前在./configure的时候增加/usr/local/python的安装目录，所以我们用ls命令查看此目录的信息。其中bin目录下用于存放python的相关执行程序。<br>但是，由于这是我们自己手动将python安装于/usr/local/python2.7目录下，此时$PATH环境变量无法找到此目录下的python解释器，为此可以增加一个软链接，代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln <span class="_">-s</span> /usr/<span class="built_in">local</span>/python2.7/bin/python  /bin/python2.7</span><br></pre></td></tr></table></figure></p>
<p>通过此命令可以在/bin路径下创建一软链接文件python2.7，当访问此链接文件，就可以间接地访问/usr/local /python2.7下的python程序了。这种方式与windows下的快捷方式类似。<br>下面可以通过运行python命令交互模式以查看刚刚安装的python版本情况：<br>执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu$ python2.7</span><br></pre></td></tr></table></figure></p>
<p>通过直接执行python2.7可以访问<code>/usr/local/python2.7</code>下的python解释器。<br>通过<code>python2.7 -V</code>来查看版本。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Oracle官方并发教程]]></title>
      <url>http://facingsea.com/2015/07/23/oracle-java-concurrency-tutorial/</url>
      <content type="html"><![CDATA[<h1 id="Oracle官方并发教程"><a href="#Oracle官方并发教程" class="headerlink" title="Oracle官方并发教程"></a>Oracle官方并发教程</h1><p>计算机的使用者一直以为他们的计算机可以同时做很多事情。他们认为当其他的应用程序在下载文件，管理打印队列或者缓冲音频的时候他们可以继续在文 字处理程序上工作。甚至对于单个应用程序，他们任然期待它能在在同一时间做很多事情。举个例子，一个流媒体播放程序必须能同时完成以下工作：从网络上读取 数字音频，解压缩数字音频，管理播放和更新程序显示。甚至文字处理器也应该能在忙于重新格式化文本和刷新显示的情况下同时响应键盘和鼠标事件。这样的软件 就被称为并发软件。</p>
<p>通过Java语言和Java类库对于基础并发的支持，Java平台具有完全（from the ground up ）支持并发编程的能力。从JDK5.0起，Java平台还引入了高级并发APIs。这个课程不仅涵盖了Java平台基础并发内容，还对高级并发APIs有 一定的阐述。</p>
<h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><p>在并发编程中，有两个基本的执行单元：进程和线程。在java语言中，并发编程最关心的是线程，然而，进程也是非常重要的。</p>
<p>即使在只有单一的执行核心的计算机系统中，也有许多活动的进程和线程。因此，在任何给定的时刻，只有一个线程在实际执行。处理器的处理时间是通过操作系统的时间片在进程和线程中共享的。</p>
<p>现在具有多处理器或有多个执行内核的多处理器的计算机系统越来越普遍，这大大增强了系统并发执行的进程和线程的吞吐量–但在不没有多个处理器或执行内核的简单的系统中，并发任然是可能的。</p>
<h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>进程具有一个独立的执行环境。通常情况下，进程拥有一个完整的、私有的基本运行资源集合。特别地，每个进程都有自己的内存空间。</p>
<p>进程往往被看作是程序或应用的代名词，然而，用户看到的一个单独的应用程序实际上可能是一组相互协作的进程集合。为了便于进程之间的通信，大多数操作系统都支持进程间通信（IPC），如pipes 和sockets。IPC不仅支持同一系统上的通信，也支持不同的系统。</p>
<p>Java虚拟机的大多数实现是单进程的。Java应用可以使用的ProcessBuilder对象创建额外的进程，多进程应用超出了本课的范围。</p>
<h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>线程有时也被称为轻量级的进程。进程和线程都提供了一个执行环境，但创建一个新的线程比创建一个新的进程需要的资源要少。</p>
<p>线程是在进程中存在的 — 每个进程最少有一个线程。线程共享进程的资源，包括内存和打开的文件。这样提高了效率，但潜在的问题就是线程间的通信。</p>
<p>多线程的执行是Java平台的一个基本特征。每个应用都至少有一个线程 – 或几个，如果算上“系统”线程的话，比如内存管理和信号处理等。但是从程序员的角度来看，启动的只有一个线程，叫主线程。这个线程有能力创建额外的线程，我们将在下一节演示。<br>线程对象 </p>
<p>在Java中，每个线程都是Thread类的实例。并发应用中一般有两种不同的线程创建策略。</p>
<pre><code>* 直接控制线程的创建和管理，每当应用程序需要执行一个异步任务的时候就为其创建一个线程
* 将线程的管理从应用程序中抽象出来作为执行器，应用程序将任务传递给执行器，有执行器负责执行。
</code></pre><p>这一节，我们将讨论Thread对象，有关Executors将在高级并发对象一节中讨论。</p>
<h4 id="定义并启动一个线程"><a href="#定义并启动一个线程" class="headerlink" title="定义并启动一个线程"></a>定义并启动一个线程</h4><p>应用程序在创建一个线程实例时，必须提供需要在线程中运行的代码。有两种方式去做到这一点：</p>
<pre><code>* 提供一个Runnable对象。Runnable对象仅包含一个run()方法，在这个方法中定义的代码将在会线程中执行。将Runnable对象传递给Thread类的构造函数即可，如下面这个HelloRunnable的例子：
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"Hello from a thread!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;  </span><br><span class="line">        (<span class="keyword">new</span> Thread(<span class="keyword">new</span> HelloRunnable())).start();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<pre><code>* 继承Thread类。Thread类自身已实现了Runnable接口，但它的run()方法中并没有定义任何代码。应用程序可以继承与Thread类，并复写run()方法。如例子HelloThread
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"Hello from a thread!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;  </span><br><span class="line">        (<span class="keyword">new</span> HelloThread()).start();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意的是，上述两个例子都需要调用Thread.start()方法来启动一个新的线程。 哪一种方式是我们应该使用的？相对来说，第一种更加通用，因为Runnable对象可以继承于其他类（Java只支持单继承，当一个类继承与Thread 类后，就无法继承与其他类）。第二种方法更易于在简单的应用程序中使用，但它的局限就是：你的任务类必须是Thread的子类。这个课程更加聚焦于第一种 将Runnable任务和Thread类分离的方式。不仅仅是因为这种方式更加灵活，更因为它更适合后面将要介绍的高级线程管理API。 Thread类定义了一些对线程管理十分有用的的方法。在这些方法中，有一些静态方法可以给当前线程调用，它们可以提供一些有关线程的信息，或者影响线程 的状态。而其他一些方法可以由其他线程进行调用，用于管理线程和Thread对象。我们将在下面的章节中，深入探讨这些内容。</p>
<h4 id="使用Sleep方法暂停一个线程"><a href="#使用Sleep方法暂停一个线程" class="headerlink" title="使用Sleep方法暂停一个线程"></a>使用Sleep方法暂停一个线程</h4><p>使用Thread.sleep()方法可以暂停当前线程一段时间。这是一种使处理器时间可以被其他线程或者运用程序使用的有效方式。sleep()方法还可以用于调整线程执行节奏（见下面的例子）和等待其他有执行时间需求的线程（这个例子将在下一节演示）。<br>在Thread中有两个不同的sleep()方法，一个使用毫秒表示休眠的时间，而另一个是用纳秒。由于操作系统的限制休眠时间并不能保证十分精 确。休眠周期可以被interrups所终止，我们将在后面看到这样的例子。不管在任何情况下，我们都不应该假定调用了sleep()方法就可以将一个线 程暂停一个十分精确的时间周期。</p>
<p>SleepMessages程序为我们展示了使用sleep()方法每四秒打印一个信息的例子</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SleepMessages</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span>  </span><br><span class="line">        <span class="keyword">throws</span> InterruptedException </span>&#123;  </span><br><span class="line">        String importantInfo[] = &#123;  </span><br><span class="line">            <span class="string">"Mares eat oats"</span>,  </span><br><span class="line">            <span class="string">"Does eat oats"</span>,  </span><br><span class="line">            <span class="string">"Little lambs eat ivy"</span>,  </span><br><span class="line">            <span class="string">"A kid will eat ivy too"</span>  </span><br><span class="line">        &#125;;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;  </span><br><span class="line">             i &lt; importantInfo.length;  </span><br><span class="line">             i++) &#123;  </span><br><span class="line">            <span class="comment">//Pause for 4 seconds  </span></span><br><span class="line">            Thread.sleep(<span class="number">4000</span>);  </span><br><span class="line">            <span class="comment">//Print a message  </span></span><br><span class="line">            System.out.println(importantInfo[i]);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>main()方法声明了它有可能抛出InterruptedException。当其他线程中断当前线程时，sleep()方法就会抛出该异常。由于这个应用程序并没有定义其他的线程，所以并不用关心如何处理该异常。</p>
<h4 id="中断（Interrupts）"><a href="#中断（Interrupts）" class="headerlink" title="中断（Interrupts）"></a>中断（Interrupts）</h4><p>中断是给线程的一个指示，告诉它应该停止正在做的事并去做其他事情。一个线程究竟要怎么响应中断请求取决于程序员，不过让其终止是很普遍的做法。这是本文重点强调的用法。</p>
<p>一个线程通过调用对被中断线程的Thread对象的interrupt()方法，发送中断信号。为了让中断机制正常工作，被中断的线程必须支持它自己的中断（即要自己处理中断）</p>
<h4 id="中断支持"><a href="#中断支持" class="headerlink" title="中断支持"></a>中断支持</h4><p>线程如何支持自身的中断？这取决于它当前正在做什么。如果线程正在频繁调用会抛InterruptedException异常的方法，在捕获异常 之后，它只是从run()方法中返回。例如，假设在SleepMessages的例子中，关键的消息循环在线程的Runnable对象的run方法中，代 码可能会被修改成下面这样以支持中断：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; importantInfo.length; i++) &#123;  </span><br><span class="line">    <span class="comment">// Pause for 4 seconds  </span></span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">       Thread.sleep(<span class="number">4000</span>);  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line">       <span class="comment">// We've been interrupted: no more messages.  </span></span><br><span class="line">      <span class="keyword">return</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line"> <span class="comment">// Print a message  </span></span><br><span class="line"> System.out.println(importantInfo[i]);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>许多会抛InterruptedException异常的方法(如sleep()），被设计成接收到中断后取消它们当前的操作，并在立即返回。</p>
<p>如果一个线程长时间运行而不调用会抛InterruptedException异常的方法会怎样？ 那它必须周期性地调用Thread.interrupted()方法，该方法在接收到中断请求后返回true。例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inputs.length; i++) &#123;  </span><br><span class="line">    heavyCrunch(inputs[i]);  </span><br><span class="line">    <span class="keyword">if</span> (Thread.interrupted()) &#123;  </span><br><span class="line">        <span class="comment">// We've been interrupted: no more crunching.  </span></span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个简单的例子中，代码只是检测中断，并在收到中断后退出线程。在更复杂的应用中，抛出一个InterruptedException异常可能更有意义。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Thread.interrupted())&#123;  </span><br><span class="line">   <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这使得中断处理代码能集中在catch语句中。</p>
<h4 id="中断状态标记"><a href="#中断状态标记" class="headerlink" title="中断状态标记"></a>中断状态标记</h4><p>中断机制通过使用称为中断状态的内部标记来实现。调用Thread.interrupt()设置这个标记。当线程通过调用静态方法 Thread.interrupted()检测中断时，中断状态会被清除。非静态的isInterrupted()方法被线程用来检测其他线程的中断状 态，不改变中断状态标记。</p>
<p>按照惯例，任何通过抛出一个InterruptedException异常退出的方法，当抛该异常时会清除中断状态。不过，通过其他的线程调用interrupt()方法，中断状态总是有可能会立即被重新设置。</p>
<h4 id="Joins"><a href="#Joins" class="headerlink" title="Joins"></a>Joins</h4><p>Join()方法可以让一个线程等待另一个线程执行完成。若t是一个正在执行的Thread对象，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t.join();</span><br></pre></td></tr></table></figure>
<p>将会使当前线程暂停执行并等待t执行完成。重载的join()方法可以让开发者自定义等待周期。然而，和sleep()方法一样join()方法依赖于操作系统的时间处理机制，你不能假定join()方法将会精确的等待你所定义的时长。<br>如同sleep()方法，join()方法响应中断并在中断时抛出InterruptedException。</p>
<h4 id="一个简单的线程例子"><a href="#一个简单的线程例子" class="headerlink" title="一个简单的线程例子"></a>一个简单的线程例子</h4><p>下面这个简单的例子将会把这一节的一些概念放到一起演示。SimpleThreads程序有两个线程组成，第一个是主线程，它从创建了一个线程并等待它执行完成。如果MessageLoop线程执行了太长时间，主线程将会将其中断。<br>MessageLoop现场将会打印一系列的信息。如果中断在它打印完所有信息前发生，它将会打印一个特定的消息并退出。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleThreads</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Display a message, preceded by  </span></span><br><span class="line">    <span class="comment">// the name of the current thread  </span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">threadMessage</span><span class="params">(String message)</span> </span>&#123;  </span><br><span class="line">        String threadName =  </span><br><span class="line">            Thread.currentThread().getName();  </span><br><span class="line">        System.out.format(<span class="string">"%s: %s%n"</span>,  </span><br><span class="line">                          threadName,  </span><br><span class="line">                          message);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageLoop</span>  </span><br><span class="line">        <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">            String importantInfo[] = &#123;  </span><br><span class="line">                <span class="string">"Mares eat oats"</span>,  </span><br><span class="line">                <span class="string">"Does eat oats"</span>,  </span><br><span class="line">                <span class="string">"Little lambs eat ivy"</span>,  </span><br><span class="line">                <span class="string">"A kid will eat ivy too"</span>  </span><br><span class="line">            &#125;;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;  </span><br><span class="line">                     i &lt; importantInfo.length;  </span><br><span class="line">                     i++) &#123;  </span><br><span class="line">                    <span class="comment">// Pause for 4 seconds  </span></span><br><span class="line">                    Thread.sleep(<span class="number">4000</span>);  </span><br><span class="line">                    <span class="comment">// Print a message  </span></span><br><span class="line">                    threadMessage(importantInfo[i]);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line">                threadMessage(<span class="string">"I wasn't done!"</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span>  </span><br><span class="line">        <span class="keyword">throws</span> InterruptedException </span>&#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// Delay, in milliseconds before  </span></span><br><span class="line">        <span class="comment">// we interrupt MessageLoop  </span></span><br><span class="line">        <span class="comment">// thread (default one hour).  </span></span><br><span class="line">        <span class="keyword">long</span> patience = <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// If command line argument  </span></span><br><span class="line">        <span class="comment">// present, gives patience  </span></span><br><span class="line">        <span class="comment">// in seconds.  </span></span><br><span class="line">        <span class="keyword">if</span> (args.length &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                patience = Long.parseLong(args[<span class="number">0</span>]) * <span class="number">1000</span>;  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;  </span><br><span class="line">                System.err.println(<span class="string">"Argument must be an integer."</span>);  </span><br><span class="line">                System.exit(<span class="number">1</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        threadMessage(<span class="string">"Starting MessageLoop thread"</span>);  </span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();  </span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MessageLoop());  </span><br><span class="line">        t.start();  </span><br><span class="line">  </span><br><span class="line">        threadMessage(<span class="string">"Waiting for MessageLoop thread to finish"</span>);  </span><br><span class="line">        <span class="comment">// loop until MessageLoop  </span></span><br><span class="line">        <span class="comment">// thread exits  </span></span><br><span class="line">        <span class="keyword">while</span> (t.isAlive()) &#123;  </span><br><span class="line">            threadMessage(<span class="string">"Still waiting..."</span>);  </span><br><span class="line">            <span class="comment">// Wait maximum of 1 second  </span></span><br><span class="line">            <span class="comment">// for MessageLoop thread  </span></span><br><span class="line">            <span class="comment">// to finish.  </span></span><br><span class="line">            t.join(<span class="number">1000</span>);  </span><br><span class="line">            <span class="keyword">if</span> (((System.currentTimeMillis() - startTime) &gt; patience)  </span><br><span class="line">                  &amp;&amp; t.isAlive()) &#123;  </span><br><span class="line">                threadMessage(<span class="string">"Tired of waiting!"</span>);  </span><br><span class="line">                t.interrupt();  </span><br><span class="line">                <span class="comment">// Shouldn't be long now  </span></span><br><span class="line">                <span class="comment">// -- wait indefinitely  </span></span><br><span class="line">                t.join();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        threadMessage(<span class="string">"Finally!"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><p>线程间的通信主要是通过共享域和引用相同的对象。这种通信方式非常高效，不过可能会引发两种错误：线程干扰和内存一致性错误。防止这些错误发生的方法是同步。</p>
<p>不过，同步会引起线程竞争，当两个或多个线程试图同时访问相同的资源，随之就导致Java运行时环境执行其中一个或多个线程比原先慢很多，甚至执行被挂起，这就出现了线程竞争。线程饥饿和活锁都属于线程竞争的范畴。关于线程竞争的更多信息可参考活跃度一节。</p>
<p>本节内容包括以下这些主题：</p>
<pre><code>* 线程干扰讨论了当多个线程访问共享数据时错误是怎么发生的。
* 内存一致性错误讨论了不一致的共享内存视图导致的错误。
* 同步方法讨论了 一种能有效防止线程干扰和内存一致性错误的常见做法。
* 内部锁和同步讨论了更通用的同步方法，以及同步是如何基于内部锁实现的。
* 原子访问讨论了不能被其他线程干扰的操作的总体思路。
</code></pre><h3 id="线程干扰"><a href="#线程干扰" class="headerlink" title="线程干扰"></a>线程干扰</h3><p>下面这个简单的Counter类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> c = <span class="number">0</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        c++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        c--;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> c;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Counter类被设计成：每次调用increment()方法，c的值加1；每次调用decrement()方法，c的值减1。如果当同一个Counter对象被多个线程引用，线程间的干扰可能会使结果同我们预期的不一致。</p>
<p>当两个运行在不同的线程中却作用在相同的数据上的操作交替执行时，就发生了线程干扰。这意味着这两个操作都由多个步骤组成，而步骤间的顺序产生了重叠。</p>
<p>Counter类实例的操作会交替执行，这看起来似乎不太可能，因为c上的这两个操作都是单一而简单的语句。然而，即使一个简单的语句也会被虚拟机转换成多个步骤。我们不去深究虚拟机内部的详细执行步骤——理解c++这个单一的语句会被分解成3个步骤就足够了：</p>
<pre><code>* 获取当前c的值；
* 对获取到的值加1；
* 把递增后的值写回到c；
</code></pre><p>语句c–也可以按同样的方式分解，除了第二步的操作是递减而不是递增。</p>
<p>假设线程A调用increment()的同时线程B调用decrement().如果c的初始值为0，线程A和B之间的交替执行顺序可能是下面这样：</p>
<pre><code>* 线程A：获取c；
* 线程B：获取c；
* 线程A：对获取的值加1，结果为1；
* 线程B：对获取的值减1，结果为-1；
* 线程A：结果写回到c,c现在是1；
* 线程B：结果写回到c,c现在是-1；
</code></pre><p>线程A的结果因为被线程B覆盖而丢失了。这个交替执行的结果只是其中一种可能性。在不同的环境下，可能是线程B的结果丢失了，也可能是不会出任何问题。由于结果是不可预知的，所以线程干扰的bug很难检测和修复。</p>
<h3 id="内存一致性错误"><a href="#内存一致性错误" class="headerlink" title="内存一致性错误"></a>内存一致性错误</h3><p>当不同的线程对相同的数据产生不一致的视图时会发生内存一致性错误。内存一致性错误的原因比较复杂，也超出了本教程的范围。不过幸运的是，一个程序员并不需要对这些原因有详细的了解。所需要的是避免它们的策略。</p>
<p>避免内存一致性错误的关键是理解happens-before关系。这种关系只是确保一个特定语句的写内存操作对另外一个特定的语句可见。要说明这个问题，请参考下面的例子。假设定义和初始化了一个简单int字段：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> counter =<span class="number">0</span> ;</span><br></pre></td></tr></table></figure>
<p>这个counter字段被A，B两个线程共享。假设线程A对counter执行递增:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">counter++;</span><br></pre></td></tr></table></figure>
<p>然后，很快的，线程B输出counter:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(counter);</span><br></pre></td></tr></table></figure>
<p>如果这两个语句已经在同一个线程中被执行过，那么输出的值应该是“1”。不过如果这两个语句在不同的线程中分开执行，那输出的值很可能是“0”， 因为无法保证线程A对counter的改动对线程B是可见的——除非我们在这两个语句之间已经建立了happens-before关系。</p>
<p>有许多操作会建立happens-before关系。其中一个是同步，我们将在下面的章节中看到。<br>我们已经见过两个建立happens-before关系的操作。</p>
<p>当一条语句调用Thread.start方法时，和该语句有happens-before关系的每一条语句，跟新线程执行的每一条语句同样有happens-before关系。创建新线程之前的代码的执行结果对线新线程是可见的。</p>
<p>当一个线程终止并且当导致另一个线程中Thread.join返回时，被终止的线程执行的所有语句和在join返回成功之后的所有语句间有happens-before关系。线程中代码的执行结果对执行join操作的线程是可见的。</p>
<p>要查看建立happens-before关系的操作列表，请参阅java.util.concurrent包的摘要页面。</p>
<h3 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h3><p>Java编程语言提供两种同步方式：同步方法和同步语句。相对较复杂的同步语句将在下一节中介绍。本节主要关注同步方法。</p>
<p>要让一个方法成为同步方法，只需要在方法声明中加上synchronized关键字：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedCounter</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> c = <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        c++;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        c--;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> c;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果count是SynchronizedCounter类的实例，那么让这些方法成为同步方法有两个作用:<br>首先，相同对象上的同步方法的两次调用，它们要交替执行是不可能的。 当一个线程正在执行对象的同步方法时，所有其他调用该对象同步方法的线程会被阻塞（挂起执行）,直到第一个线程处理完该对象。</p>
<p>其次，当一个同步方法退出时，它会自动跟该对象同步方法的任意后续调用建立起一种happens-before关系。这确保对象状态的改变对所有线程是可见的。</p>
<p>注意构造方法不能是同步的——构造方法加synchronized关键字会报语法错误。同步的构造方法没有意义，因为当这个对象被创建的时候，只有创建对象的线程能访问它。</p>
<pre><code>警告：当创建的对象会被多个线程共享时必须非常小心，对象的引用不要过早“暴露”出去。比如，假设你要维护一个叫instances的List，它包含类的每一个实例对象。你可能会尝试在构造方法中加这样一行：
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">instances.add(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>
<p>不过其他线程就能够在对象构造完成之前使用instances访问对象。</p>
<p>同步(synchronized)方法使用一种简单的策略来防止线程干扰和内存一致性错误：如果一个对象对多个线程可见，对象域上的所有读写操作 都是通过synchronized方法来完成的。（一个重要的例外：final域，在对象被创建后不可修改,能被非synchronized方法安全的读 取）。synchronized同步策略很有效，不过会引起活跃度问题，我们将在本节后面看到。</p>
<h4 id="内部锁与同步"><a href="#内部锁与同步" class="headerlink" title="内部锁与同步"></a>内部锁与同步</h4><p>同步机制的建立是基于其内部一个叫内部锁或者监视锁的实体。（在Java API规范中通常被称为监视器。）内部锁在同步机制中起到两方面的作用：对一个对象的排他性访问；建立一种happens-before关系，而这种关系正是可见性问题的关键所在。</p>
<p>每个对象都有一个与之关联的内部锁。通常当一个线程需要排他性的访问一个对象的域时，首先需要请求该对象的内部锁，当访问结束时释放内部锁。在线 程获得内部锁到释放内部锁的这段时间里，我们说线程拥有这个内部锁。那么当一个线程拥有一个内部锁时，其他线程将无法获得该内部锁。其他线程如果去尝试获 得该内部锁，则会被阻塞。</p>
<p>当线程释放一个内部锁时，该操作和对该锁的后续请求间将建立happens-before关系。</p>
<h4 id="同步方法中的锁"><a href="#同步方法中的锁" class="headerlink" title="同步方法中的锁"></a>同步方法中的锁</h4><p>当线程调用一个同步方法时，它会自动请求该方法所在对象的内部锁。当方法返回结束时则自动释放该内部锁，即使退出是由于发生了未捕获的异常，内部锁也会被释放。</p>
<p>你可能会问调用一个静态的同步方法会如何，由于静态方法是和类（而不是对象）相关的，所以线程会请求类对象(Class Object)的内部锁。因此用来控制类的静态域访问的锁不同于控制对象访问的锁。</p>
<h4 id="同步块"><a href="#同步块" class="headerlink" title="同步块"></a>同步块</h4><p>另外一种同步的方法是使用同步块。和同步方法不同，同步块必须指定所请求的是哪个对象的内部锁：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addName</span><span class="params">(String name)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;  </span><br><span class="line">        lastName = name;  </span><br><span class="line">        nameCount++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    nameList.add(name);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在上面的例子中，addName方法需要使lastName和nameCount的更改保持同步，而且要避免同步调用该对象的其他方法。（在同步代码中调用其他方法会产生Liveness一节所描述的问题。）如果不使用同步块，那么必须要定义一个额外的非同步方法，而这个方法仅仅是用来调用nameList.add。</p>
<p>使用同步块对于更细粒度的同步很有帮助。例如类MsLunch有两个实例域c1和c2，他们并不会同时使用（译者注：即c1和c2是彼此无关的两 个域），所有对这两个域的更新都需要同步，但是完全不需要防止c1的修改和c2的修改相互之间干扰（这样做只会产生不必要的阻塞而降低了并发性）。这种情 况下不必使用同步方法，可以使用和this对象相关的锁。这里我们创建了两个“锁”对象（译者注：起到加锁效果的普通对象lock1和lock2）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsLunch</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> c1 = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> c2 = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">private</span> Object lock1 = <span class="keyword">new</span> Object();  </span><br><span class="line">    <span class="keyword">private</span> Object lock2 = <span class="keyword">new</span> Object();  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inc1</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">synchronized</span>(lock1) &#123;  </span><br><span class="line">            c1++;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inc2</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">synchronized</span>(lock2) &#123;  </span><br><span class="line">            c2++;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用这种方法时要特别小心，需要十分确定c1和c2是彼此无关的域。</p>
<h3 id="可重入同步"><a href="#可重入同步" class="headerlink" title="可重入同步"></a>可重入同步</h3><p>还记得吗，一个线程不能获得其他线程所拥有的锁。但是它可以获得自己已经拥有的锁。允许一个线程多次获得同一个锁实现了可重入同步。这里描述了一 种同步代码的场景，直接的或间接地，调用了一个也拥有同步代码的方法，且两边的代码使用的是同一把锁。如果没有这种可重入的同步机制，同步代码则需要采取 许多额外的预防措施以防止线程阻塞自己。</p>
<h3 id="原子访问"><a href="#原子访问" class="headerlink" title="原子访问"></a>原子访问</h3><p>在编程过程中，原子操作是指所有操作都同时发生。原子操作不能被中途打断：要么全做，要么不做。原子操作在完成前不会有看得见的副作用。</p>
<p>我们发现像c++这样的增量表达式，并没有描述原子操作。即使是非常简单的表达式也能够定义成能被分解为其他操作的复杂操作。然而，有些操作你可以定义为原子的：</p>
<pre><code>* 对引用变量和大部分基本类型变量（除long和double之外）的读写是原子的。
* 对所有声明为volatile的变量（包括long和double变量）的读写是原子的。
</code></pre><p>原子操作不会交错，于是可以放心使用，不必担心线程干扰。然而，这并不能完全消除原子操作上的同步，因为内存一致性错误仍可能发生。使用 volatile变量可以降低内存一致性错误的风险，因为对volatile变量的任意写操作，对于后续在该变量上的读操作建立了happens- before关系。这意味着volatile变量的修改对于其他线程总是可见的。更重要的是，这同时也意味着当一个线程读取一个volatile变量时， 它不仅能看到该变量最新的修改，而且也能看到致使该改变发生的代码的副效应。</p>
<p>使用简单的原子变量访问比通过同步代码来访问更高效，但是需要程序员更加谨慎以避免内存一致性错误。至于这额外的付出是否值得，得看应用的大小和复杂度。</p>
<p>java.util.concurrent包中的一些类提供了一些不依赖同步机制的原子方法。我们将在高级并发对象这一节中讨论它们。</p>
<h2 id="活跃度"><a href="#活跃度" class="headerlink" title="活跃度"></a>活跃度</h2><p>一个并发应用程序能及时执行的能力称为活跃性。本节将介绍最常见的活跃性问题：死锁（deadlock），以及另外两个活跃性问题：饥饿（starvation）和活锁（livelock）。</p>
<h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>死锁描述了这样一种情景，两个或多个线程永久阻塞，互相等待对方释放资源。下面是一个例子。</p>
<p>Alphone和Gaston是朋友，都很讲究礼节。礼节有一个严格的规矩，当你向一个朋友鞠躬时，你必须保持鞠躬的姿势，直到你的朋友有机会回鞠给你。不幸的是，这个规矩没有算上两个朋友相互同时鞠躬的可能。</p>
<p>下面的应用例子，DeadLock，模拟了这个可能性。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Friend</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String name;  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Friend</span><span class="params">(String name)</span> </span>&#123;  </span><br><span class="line">            <span class="keyword">this</span>.name = name;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">bow</span><span class="params">(Friend bower)</span> </span>&#123;  </span><br><span class="line">            System.out.format(<span class="string">"%s: %s"</span>  </span><br><span class="line">                + <span class="string">"  has bowed to me!%n"</span>,  </span><br><span class="line">                <span class="keyword">this</span>.name, bower.getName());  </span><br><span class="line">            bower.bowBack(<span class="keyword">this</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">bowBack</span><span class="params">(Friend bower)</span> </span>&#123;  </span><br><span class="line">            System.out.format(<span class="string">"%s: %s"</span>  </span><br><span class="line">                + <span class="string">" has bowed back to me!%n"</span>,  </span><br><span class="line">                <span class="keyword">this</span>.name, bower.getName());  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">final</span> Friend alphonse =  </span><br><span class="line">            <span class="keyword">new</span> Friend(<span class="string">"Alphonse"</span>);  </span><br><span class="line">        <span class="keyword">final</span> Friend gaston =  </span><br><span class="line">            <span class="keyword">new</span> Friend(<span class="string">"Gaston"</span>);  </span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; alphonse.bow(gaston); &#125;  </span><br><span class="line">        &#125;).start();  </span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; gaston.bow(alphonse); &#125;  </span><br><span class="line">        &#125;).start();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当DeadLock运行后，两个线程极有可能阻塞，当它们尝试调用bowBack方法时。没有哪个阻塞会结束，因为每个线程都在等待另一个线程退出bow方法。</p>
<h3 id="饥饿和活锁"><a href="#饥饿和活锁" class="headerlink" title="饥饿和活锁"></a>饥饿和活锁</h3><p>饥饿和活锁并不如死锁一般普遍，但它仍然是每个并发程序设计者可能会遇到的问题。</p>
<h4 id="饥饿"><a href="#饥饿" class="headerlink" title="饥饿"></a>饥饿</h4><p>饥饿是指当一个线程不能正常的访问共享资源并且不能正常执行的情况。这通常在共享资源被其他“贪心”的线程长期时发生。举个例子，假设一个对象提 供了一个同步方法，这个方法通常需要执行很长一段时间才返回。如果一个线程经常调用这个方法，那么其他需要同步的访问这个对象的线程就经常会被阻塞。</p>
<h4 id="活锁"><a href="#活锁" class="headerlink" title="活锁"></a>活锁</h4><p>一个线程通常会有会响应其他线程的活动。如果其他线程也会响应另一个线程的活动，那么就有可能发生活锁。同死锁一样，发生活锁的线程无法继续执 行。然而线程并没有阻塞——他们在忙于响应对方无法恢复工作。这就相当于两个在走廊相遇的人：Alphonse向他自己的左边靠想让Gaston过去，而 Gaston向他的右边靠想让Alphonse过去。可见他们阻塞了对方。Alphonse向他的右边靠，而Gaston向他的左边靠，他们还是阻塞了对 方。</p>
<h2 id="保护块（Guarded-Blocks）"><a href="#保护块（Guarded-Blocks）" class="headerlink" title="保护块（Guarded Blocks）"></a>保护块（Guarded Blocks）</h2><p>多线程之间经常需要协同工作，最常见的方式是使用Guarded Blocks，它循环检查一个条件（通常初始值为true），直到条件发生变化才跳出循环继续执行。在使用Guarded Blocks时有以下几个步骤需要注意：</p>
<p>假设guardedJoy()方法必须要等待另一线程为共享变量joy设值才能继续执行。那么理论上可以用一个简单的条件循环来实现，但在等待过程中guardedJoy方法不停的检查循环条件实际上是一种资源浪费。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">guardedJoy</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="comment">// Simple loop guard. Wastes  </span></span><br><span class="line">    <span class="comment">// processor time. Don't do this!  </span></span><br><span class="line">    <span class="keyword">while</span>(!joy) &#123;&#125;  </span><br><span class="line">    System.out.println(<span class="string">"Joy has been achieved!"</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更加高效的方法是调用Object.wait将当前线程挂起，直到有另一线程发起事件通知（尽管通知的事件不一定是当前线程等待的事件）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">guardedJoy</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="comment">// This guard only loops once for each special event, which may not  </span></span><br><span class="line">    <span class="comment">// be the event we're waiting for.  </span></span><br><span class="line">    <span class="keyword">while</span>(!joy) &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            wait();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;&#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    System.out.println(<span class="string">"Joy and efficiency have been achieved!"</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<pre><code>注意：一定要在循环里面调用wait方法，不要想当然的认为线程唤醒后循环条件一定发生了改变。
</code></pre><p>和其他可以暂停线程执行的方法一样，wait方法会抛出InterruptedException，在上面的例子中，因为我们关心的是joy的值，所以忽略了InterruptedException。</p>
<p>为什么guardedJoy是synchronized方法？假设d是用来调用wait的对象，当一个线程调用d.wait，它必须要拥有d的内部锁（否则会抛出异常），获得d的内部锁的最简单方法是在一个synchronized方法里面调用wait。</p>
<p>当一个线程调用wait方法时，它释放锁并挂起。然后另一个线程请求并获得这个锁并调用Object.notifyAll通知所有等待该锁的线程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="title">notifyJoy</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    joy = <span class="keyword">true</span>;  </span><br><span class="line">    notifyAll();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当第二个线程释放这个该锁后，第一个线程再次请求该锁，从wait方法返回并继续执行。</p>
<pre><code>注意：还有另外一个通知方法，notify()，它只会唤醒一个线程。但由于它并不允许指定哪一个线程被唤醒，所以一般只在大规模并发应用（即系统有大量相似任务的线程）中使用。因为对于大规模并发应用，我们其实并不关心哪一个线程被唤醒。
</code></pre><p>现在我们使用Guarded blocks创建一个生产者/消费者应用。这类应用需要在两个线程之间共享数据：生产者生产数据，消费者使用数据。两个线程通过共享对象通信。在这里，线 程协同工作的关键是：生产者发布数据之前，消费者不能够去读取数据；消费者没有读取旧数据前，生产者不能发布新数据。</p>
<p>在下面的例子中，数据通过Drop对象共享的一系列文本消息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Drop</span> </span>&#123;  </span><br><span class="line">    <span class="comment">// Message sent from producer  </span></span><br><span class="line">    <span class="comment">// to consumer.  </span></span><br><span class="line">    <span class="keyword">private</span> String message;  </span><br><span class="line">    <span class="comment">// True if consumer should wait  </span></span><br><span class="line">    <span class="comment">// for producer to send message,  </span></span><br><span class="line">    <span class="comment">// false if producer should wait for  </span></span><br><span class="line">    <span class="comment">// consumer to retrieve message.  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> empty = <span class="keyword">true</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">take</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="comment">// Wait until message is  </span></span><br><span class="line">        <span class="comment">// available.  </span></span><br><span class="line">        <span class="keyword">while</span> (empty) &#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                wait();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;&#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">// Toggle status.  </span></span><br><span class="line">        empty = <span class="keyword">true</span>;  </span><br><span class="line">        <span class="comment">// Notify producer that  </span></span><br><span class="line">        <span class="comment">// status has changed.  </span></span><br><span class="line">        notifyAll();  </span><br><span class="line">        <span class="keyword">return</span> message;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String message)</span> </span>&#123;  </span><br><span class="line">        <span class="comment">// Wait until message has  </span></span><br><span class="line">        <span class="comment">// been retrieved.  </span></span><br><span class="line">        <span class="keyword">while</span> (!empty) &#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                wait();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;&#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">// Toggle status.  </span></span><br><span class="line">        empty = <span class="keyword">false</span>;  </span><br><span class="line">        <span class="comment">// Store message.  </span></span><br><span class="line">        <span class="keyword">this</span>.message = message;  </span><br><span class="line">        <span class="comment">// Notify consumer that status  </span></span><br><span class="line">        <span class="comment">// has changed.  </span></span><br><span class="line">        notifyAll();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Producer是生产者线程，发送一组消息，字符串DONE表示所有消息都已经发送完成。为了模拟现实情况，生产者线程还会在消息发送时随机的暂停。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> Drop drop;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(Drop drop)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.drop = drop;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        String importantInfo[] = &#123;  </span><br><span class="line">            <span class="string">"Mares eat oats"</span>,  </span><br><span class="line">            <span class="string">"Does eat oats"</span>,  </span><br><span class="line">            <span class="string">"Little lambs eat ivy"</span>,  </span><br><span class="line">            <span class="string">"A kid will eat ivy too"</span>  </span><br><span class="line">        &#125;;  </span><br><span class="line">        Random random = <span class="keyword">new</span> Random();  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;  </span><br><span class="line">             i &amp;lt; importantInfo.length;  </span><br><span class="line">             i++) &#123;  </span><br><span class="line">            drop.put(importantInfo[i]);  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                Thread.sleep(random.nextInt(<span class="number">5000</span>));  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;&#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        drop.put(<span class="string">"DONE"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Consumer是消费者线程，读取消息并打印出来，直到读取到字符串DONE为止。消费者线程在消息读取时也会随机的暂停。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> Drop drop;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(Drop drop)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.drop = drop;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">         Random random = <span class="keyword">new</span> Random();  </span><br><span class="line">         <span class="keyword">for</span> (String message = drop.take();  </span><br><span class="line">              ! message.equals(<span class="string">"DONE"</span>);  </span><br><span class="line">              message = drop.take()) &#123;  </span><br><span class="line">             System.out.format(<span class="string">"MESSAGE RECEIVED: %s%n"</span>, message);  </span><br><span class="line">             <span class="keyword">try</span> &#123;  </span><br><span class="line">                 Thread.sleep(random.nextInt(<span class="number">5000</span>));  </span><br><span class="line">             &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;&#125;  </span><br><span class="line">         &#125;  </span><br><span class="line">     &#125;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>ProducerConsumerExample是主线程，它启动生产者线程和消费者线程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerConsumerExample</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        Drop drop = <span class="keyword">new</span> Drop();  </span><br><span class="line">        (<span class="keyword">new</span> Thread(<span class="keyword">new</span> Producer(drop))).start();  </span><br><span class="line">        (<span class="keyword">new</span> Thread(<span class="keyword">new</span> Consumer(drop))).start();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<pre><code>注意：Drop类是用来演示Guarded Blocks如何工作的。为了避免重新发明轮子，当你尝试创建自己的共享数据对象时，请查看Java Collections Framework中已有的数据结构。如需更多信息，请参考Questions and Exercises。
</code></pre><h2 id="不可变对象"><a href="#不可变对象" class="headerlink" title="不可变对象"></a>不可变对象</h2><p>一个对象如果在创建后不能被修改，那么就称为不可变对象。在并发编程中，一种被普遍认可的原则就是：尽可能的使用不可变对象来创建简单、可靠的代码。</p>
<p>在并发编程中，不可变对象特别有用。由于创建后不能被修改，所以不会出现由于线程干扰产生的错误或是内存一致性错误。</p>
<p>但是程序员们通常并不热衷于使用不可变对象，因为他们担心每次创建新对象的开销。实际上这种开销常常被过分高估，而且使用不可变对象所带来的一些 效率提升也抵消了这种开销。例如：使用不可变对象降低了垃圾回收所产生的额外开销，也减少了用来确保使用可变对象不出现并发错误的一些额外代码。</p>
<p>接下来看一个可变对象的类，然后转化为一个不可变对象的类。通过这个例子说明转化的原则以及使用不可变对象的好处。</p>
<h3 id="一个同步类的例子"><a href="#一个同步类的例子" class="headerlink" title="一个同步类的例子"></a>一个同步类的例子</h3><p>SynchronizedRGB是表示颜色的类，每一个对象代表一种颜色，使用三个整形数表示颜色的三基色，字符串表示颜色名称。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedRGB</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Values must be between 0 and 255.  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> red;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> green;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> blue;  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> red,  </span><br><span class="line">                        <span class="keyword">int</span> green,  </span><br><span class="line">                        <span class="keyword">int</span> blue)</span> </span>&#123;  </span><br><span class="line">         <span class="keyword">if</span> (red &lt; <span class="number">0</span> || red &gt; <span class="number">255</span>  </span><br><span class="line">             || green &lt; <span class="number">0</span> || green &gt; <span class="number">255</span>  </span><br><span class="line">             || blue &lt; <span class="number">0</span> || blue &gt; <span class="number">255</span>) &#123;  </span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();  </span><br><span class="line">         &#125;  </span><br><span class="line">     &#125;  </span><br><span class="line">   </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">SynchronizedRGB</span><span class="params">(<span class="keyword">int</span> red,  </span><br><span class="line">                            <span class="keyword">int</span> green,  </span><br><span class="line">                            <span class="keyword">int</span> blue,  </span><br><span class="line">                            String name)</span> </span>&#123;  </span><br><span class="line">         check(red, green, blue);  </span><br><span class="line">         <span class="keyword">this</span>.red = red;  </span><br><span class="line">         <span class="keyword">this</span>.green = green;  </span><br><span class="line">         <span class="keyword">this</span>.blue = blue;  </span><br><span class="line">         <span class="keyword">this</span>.name = name;  </span><br><span class="line">     &#125;  </span><br><span class="line">   </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> red,  </span><br><span class="line">                     <span class="keyword">int</span> green,  </span><br><span class="line">                     <span class="keyword">int</span> blue,  </span><br><span class="line">                     String name)</span> </span>&#123;  </span><br><span class="line">         check(red, green, blue);  </span><br><span class="line">         <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;  </span><br><span class="line">             <span class="keyword">this</span>.red = red;  </span><br><span class="line">             <span class="keyword">this</span>.green = green;  </span><br><span class="line">             <span class="keyword">this</span>.blue = blue;  </span><br><span class="line">             <span class="keyword">this</span>.name = name;  </span><br><span class="line">         &#125;  </span><br><span class="line">     &#125;  </span><br><span class="line">   </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">getRGB</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">         <span class="keyword">return</span> ((red &lt;&lt; <span class="number">16</span>) | (green &lt;&lt; <span class="number">8</span>) | blue);  </span><br><span class="line">     &#125;  </span><br><span class="line">   </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">         <span class="keyword">return</span> name;  </span><br><span class="line">     &#125;  </span><br><span class="line">   </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">invert</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">         red = <span class="number">255</span> - red;  </span><br><span class="line">         green = <span class="number">255</span> - green;  </span><br><span class="line">         blue = <span class="number">255</span> - blue;  </span><br><span class="line">         name = <span class="string">"Inverse of "</span> + name;  </span><br><span class="line">     &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用SynchronizedRGB时需要小心，避免其处于不一致的状态。例如一个线程执行了以下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SynchronizedRGB color =  </span><br><span class="line">    <span class="keyword">new</span> SynchronizedRGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">"Pitch Black"</span>);  </span><br><span class="line">...  </span><br><span class="line"><span class="keyword">int</span> myColorInt = color.getRGB();      <span class="comment">//Statement 1  </span></span><br><span class="line">String myColorName = color.getName(); <span class="comment">//Statement 2</span></span><br></pre></td></tr></table></figure>
<p>如果有另外一个线程在Statement 1之后、Statement 2之前调用了color.set方法，那么myColorInt的值和myColorName的值就会不匹配。为了避免出现这样的结果，必须要像下面这样把这两条语句绑定到一块执行：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (color) &#123;  </span><br><span class="line">    <span class="keyword">int</span> myColorInt = color.getRGB();  </span><br><span class="line">    String myColorName = color.getName();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种不一致的问题只可能发生在可变对象上。</p>
<h3 id="定义不可变对象的策略"><a href="#定义不可变对象的策略" class="headerlink" title="定义不可变对象的策略"></a>定义不可变对象的策略</h3><p>以下的一些规则是创建不可变对象的简单策略。并非所有不可变类都完全遵守这些规则，不过这不是编写这些类的程序员们粗心大意造成的，很可能的是他们有充分的理由确保这些对象在创建后不会被修改。但这需要非常复杂细致的分析，并不适用于初学者。</p>
<pre><code>1. 不要提供setter方法。（包括修改字段的方法和修改字段引用对象的方法）
2. 将类的所有字段定义为final、private的。
3. 不允许子类重写方法。简单的办法是将类声明为final，更好的方法是将构造函数声明为私有的，通过工厂方法创建对象。
4. 如果类的字段是对可变对象的引用，不允许修改被引用对象。
&gt; 不提供修改可变对象的方法。
&gt; 不共享可变对象的引用。当一个引用被当做参数传递给构造函数，而这个引用指向的是一个外部的可变对象时，一定不要保存这个引用。如果必须要保存，那么创建可变对象的拷贝，然后保存拷贝对象的引用。同样如果需要返回内部的可变对象时，不要返回可变对象本身，而是返回其拷贝。
</code></pre><p>将这一策略应用到SynchronizedRGB有以下几步：</p>
<pre><code>1. SynchronizedRGB类有两个setter方法。第一个set方法只是简单的为字段设值（译者注：删掉即可），第二个invert方法修改为创建一个新对象，而不是在原有对象上修改。
2. 所有的字段都已经是私有的，加上final即可。
3. 将类声明为final的
4. 只有一个字段是对象引用，并且被引用的对象也是不可变对象。
</code></pre><p>经过以上这些修改后，我们得到了ImmutableRGB：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImmutableRGB</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Values must be between 0 and 255.  </span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> <span class="keyword">int</span> red;  </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> <span class="keyword">int</span> green;  </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> <span class="keyword">int</span> blue;  </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> String name;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> red,  </span><br><span class="line">                        <span class="keyword">int</span> green,  </span><br><span class="line">                        <span class="keyword">int</span> blue)</span> </span>&#123;  </span><br><span class="line">         <span class="keyword">if</span> (red &lt; <span class="number">0</span> || red &gt; <span class="number">255</span>  </span><br><span class="line">             || green &lt; <span class="number">0</span> || green &gt; <span class="number">255</span>  </span><br><span class="line">             || blue &lt; <span class="number">0</span> || blue &gt; <span class="number">255</span>) &#123;  </span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();  </span><br><span class="line">         &#125;  </span><br><span class="line">     &#125;  </span><br><span class="line">   </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">ImmutableRGB</span><span class="params">(<span class="keyword">int</span> red,  </span><br><span class="line">                         <span class="keyword">int</span> green,  </span><br><span class="line">                         <span class="keyword">int</span> blue,  </span><br><span class="line">                         String name)</span> </span>&#123;  </span><br><span class="line">         check(red, green, blue);  </span><br><span class="line">         <span class="keyword">this</span>.red = red;  </span><br><span class="line">         <span class="keyword">this</span>.green = green;  </span><br><span class="line">         <span class="keyword">this</span>.blue = blue;  </span><br><span class="line">         <span class="keyword">this</span>.name = name;  </span><br><span class="line">     &#125;  </span><br><span class="line">   </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRGB</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">         <span class="keyword">return</span> ((red &lt;&lt; <span class="number">16</span>) | (green &lt;&lt; <span class="number">8</span>) | blue);  </span><br><span class="line">     &#125;  </span><br><span class="line">   </span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">         <span class="keyword">return</span> name;  </span><br><span class="line">     &#125;  </span><br><span class="line">   </span><br><span class="line">     <span class="function"><span class="keyword">public</span> ImmutableRGB <span class="title">invert</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> ImmutableRGB(<span class="number">255</span> - red,  </span><br><span class="line">                        <span class="number">255</span> - green,  </span><br><span class="line">                        <span class="number">255</span> - blue,  </span><br><span class="line">                        <span class="string">"Inverse of "</span> + name);  </span><br><span class="line">     &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="高级并发对象"><a href="#高级并发对象" class="headerlink" title="高级并发对象"></a>高级并发对象</h2><p>目前为止，该教程重点讲述了最初作为Java平台一部分的低级别API。这些API对于非常基本的任务来说已经足够，但是对于更高级的任务就需要 更高级的API。特别是针对充分利用了当今多处理器和多核系统的大规模并发应用程序。 本节，我们将着眼于Java 5.0新增的一些高级并发特征。大多数特征已经在新的java.util.concurrent包中实现。Java集合框架中也定义了新的并发数据结构。</p>
<pre><code>* 锁对象提供了可以简化许多并发应用的锁的惯用法。
* Executors为加载和管理线程定义了高级API。Executors的实现由java.util.concurrent包提供，提供了适合大规模应用的线程池管理。
* 并发集合简化了大型数据集合管理，且极大的减少了同步的需求。
* 原子变量有减小同步粒度和避免内存一致性错误的特征。
* 并发随机数（JDK7）提供了高效的多线程生成伪随机数的方法。
</code></pre><h3 id="锁对象"><a href="#锁对象" class="headerlink" title="锁对象"></a>锁对象</h3><p>同步代码依赖于一种简单的可重入锁。这种锁使用简单，但也有诸多限制。</p>
<p>java.util.concurrent.locks包提供了更复杂的锁。我们不会详细考察这个包，但会重点关注其最基本的接口，锁。  锁对象作用非常类似同步代码使用的隐式锁。如同隐式锁，每次只有一个线程可以获得锁对象。通过关联Condition对 象，锁对象也支持wait/notify机制。 锁对象之于隐式锁最大的优势在于，它们有能力收回获得锁的尝试。如果当前锁对象不可用，或者锁请求超时（如果超时时间已指定），tryLock方法会收回 获取锁的请求。如果在锁获取前，另一个线程发送了一个中断，lockInterruptibly方法也会收回获取锁的请求。 让我们使用锁对象来解决我们在活跃度中 见到的死锁问题。Alphonse和Gaston已经把自己训练成能注意到朋友何时要鞠躬。我们通过要求Friend对象在双方鞠躬前必须先获得锁来模拟 这次改善。下面是改善后模型的源代码，Safelock。为了展示其用途广泛，我们假设Alphonse和Gaston对于他们新发现的稳定鞠躬的能力是 如此入迷，以至于他们无法不相互鞠躬。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;  </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;  </span><br><span class="line"><span class="keyword">import</span> java.util.Random;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Safelock</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Friend</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String name;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();  </span><br><span class="line">  </span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="title">Friend</span><span class="params">(String name)</span> </span>&#123;  </span><br><span class="line">             <span class="keyword">this</span>.name = name;  </span><br><span class="line">         &#125;  </span><br><span class="line">   </span><br><span class="line">         <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">this</span>.name;  </span><br><span class="line">         &#125;  </span><br><span class="line">   </span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">impendingBow</span><span class="params">(Friend bower)</span> </span>&#123;  </span><br><span class="line">             Boolean myLock = <span class="keyword">false</span>;  </span><br><span class="line">             Boolean yourLock = <span class="keyword">false</span>;  </span><br><span class="line">             <span class="keyword">try</span> &#123;  </span><br><span class="line">                 myLock = lock.tryLock();  </span><br><span class="line">                 yourLock = bower.lock.tryLock();  </span><br><span class="line">             &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">                 <span class="keyword">if</span> (! (myLock &amp;&amp; yourLock)) &#123;  </span><br><span class="line">                     <span class="keyword">if</span> (myLock) &#123;  </span><br><span class="line">                         lock.unlock();  </span><br><span class="line">                     &#125;  </span><br><span class="line">                     <span class="keyword">if</span> (yourLock) &#123;  </span><br><span class="line">                         bower.lock.unlock();  </span><br><span class="line">                     &#125;  </span><br><span class="line">                 &#125;  </span><br><span class="line">             &#125;  </span><br><span class="line">             <span class="keyword">return</span> myLock &amp;&amp; yourLock;  </span><br><span class="line">         &#125;  </span><br><span class="line">   </span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bow</span><span class="params">(Friend bower)</span> </span>&#123;  </span><br><span class="line">             <span class="keyword">if</span> (impendingBow(bower)) &#123;  </span><br><span class="line">                 <span class="keyword">try</span> &#123;  </span><br><span class="line">                     System.out.format(<span class="string">"%s: %s has"</span>  </span><br><span class="line">                         + <span class="string">" bowed to me!%n"</span>,  </span><br><span class="line">                         <span class="keyword">this</span>.name, bower.getName());  </span><br><span class="line">                     bower.bowBack(<span class="keyword">this</span>);  </span><br><span class="line">                 &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">                     lock.unlock();  </span><br><span class="line">                     bower.lock.unlock();  </span><br><span class="line">                 &#125;  </span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                 System.out.format(<span class="string">"%s: %s started"</span>  </span><br><span class="line">                     + <span class="string">" to bow to me, but saw that"</span>  </span><br><span class="line">                     + <span class="string">" I was already bowing to"</span>  </span><br><span class="line">                     + <span class="string">" him.%n"</span>,  </span><br><span class="line">                     <span class="keyword">this</span>.name, bower.getName());  </span><br><span class="line">             &#125;  </span><br><span class="line">         &#125;  </span><br><span class="line">   </span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bowBack</span><span class="params">(Friend bower)</span> </span>&#123;  </span><br><span class="line">             System.out.format(<span class="string">"%s: %s has"</span> +  </span><br><span class="line">                 <span class="string">" bowed back to me!%n"</span>,  </span><br><span class="line">                 <span class="keyword">this</span>.name, bower.getName());  </span><br><span class="line">         &#125;  </span><br><span class="line"> &#125;  </span><br><span class="line">   </span><br><span class="line">     <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BowLoop</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;  </span><br><span class="line">         <span class="keyword">private</span> Friend bower;  </span><br><span class="line">         <span class="keyword">private</span> Friend bowee;  </span><br><span class="line">   </span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="title">BowLoop</span><span class="params">(Friend bower, Friend bowee)</span> </span>&#123;  </span><br><span class="line">             <span class="keyword">this</span>.bower = bower;  </span><br><span class="line">             <span class="keyword">this</span>.bowee = bowee;  </span><br><span class="line">         &#125;  </span><br><span class="line">   </span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">             Random random = <span class="keyword">new</span> Random();  </span><br><span class="line">             <span class="keyword">for</span> (;;) &#123;  </span><br><span class="line">                 <span class="keyword">try</span> &#123;  </span><br><span class="line">                     Thread.sleep(random.nextInt(<span class="number">10</span>));  </span><br><span class="line">                 &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;&#125;  </span><br><span class="line">                 bowee.bow(bower);  </span><br><span class="line">             &#125;  </span><br><span class="line">         &#125;  </span><br><span class="line">     &#125;  </span><br><span class="line">   </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">         <span class="keyword">final</span> Friend alphonse =  </span><br><span class="line">             <span class="keyword">new</span> Friend(<span class="string">"Alphonse"</span>);  </span><br><span class="line">         <span class="keyword">final</span> Friend gaston =  </span><br><span class="line">             <span class="keyword">new</span> Friend(<span class="string">"Gaston"</span>);  </span><br><span class="line">         <span class="keyword">new</span> Thread(<span class="keyword">new</span> BowLoop(alphonse, gaston)).start();  </span><br><span class="line">         <span class="keyword">new</span> Thread(<span class="keyword">new</span> BowLoop(gaston, alphonse)).start();  </span><br><span class="line">     &#125;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="执行器（Executors）"><a href="#执行器（Executors）" class="headerlink" title="执行器（Executors）"></a>执行器（Executors）</h3><p>在之前所有的例子中，Thread对象表示的线程和Runnable对象表示的线程所执行的任务之间是紧耦合的。这对于小型应用程序来说没问题， 但对于大规模并发应用来说，合理的做法是将线程的创建与管理和程序的其他部分分离开。封装这些功能的对象就是执行器，接下来的部分将讲详细描述执行器。 </p>
<pre><code>* 执行器接口定义了三种类型的执行器对象。
* 线程池是最常见的一种执行器的实现。
* Fork/Join是JDK 7中引入的并发框架。
</code></pre><h3 id="Executor接口"><a href="#Executor接口" class="headerlink" title="Executor接口"></a>Executor接口</h3><p>java.util.concurrent中包括三个Executor接口：</p>
<pre><code>* Executor，一个运行新任务的简单接口。
* ExecutorService，扩展了Executor接口。添加了一些用来管理执行器生命周期和任务生命周期的方法。
* ScheduledExecutorService，扩展了ExecutorService。支持Future和定期执行任务。
</code></pre><p>通常来说，指向Executor对象的变量应被声明为以上三种接口之一，而不是具体的实现类。</p>
<h4 id="Executor接口-1"><a href="#Executor接口-1" class="headerlink" title="Executor接口"></a>Executor接口</h4><p>Executor接口只有一个execute方法，用来替代通常创建（启动）线程的方法。例如：r是一个Runnable对象，e是一个Executor对象。可以使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.execute(r);</span><br></pre></td></tr></table></figure>
<p>来代替</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">new</span> Thread(r)).start();</span><br></pre></td></tr></table></figure>
<p>但execute方法没有定义具体的实现方式。对于不同的Executor实现，execute方法可能是创建一个新线程并立即启动，但更有可能是使用已有的工作线程运行r，或者将r放入到队列中等待可用的工作线程。（我们将在线程池一节中描述工作线程。）</p>
<h4 id="ExecutorService接口"><a href="#ExecutorService接口" class="headerlink" title="ExecutorService接口"></a>ExecutorService接口</h4><p>ExecutorService接 口在提供了execute方法的同时，新加了更加通用的submit方法。submit方法除了和execute方法一样可以接受Runnable对象作 为参数，还可以接受Callable对象作为参数。使用Callable对象可以能使任务返还执行的结果。通过submit方法返回的Future对象可 以读取Callable任务的执行结果，或是管理Callable任务和Runnable任务的状态。 ExecutorService也提供了批量运行Callable任务的方法。最后，ExecutorService还提供了一些关闭执行器的方法。如果 需要支持即时关闭，执行器所执行的任务需要正确处理中断。</p>
<h4 id="ScheduledExecutorService接口"><a href="#ScheduledExecutorService接口" class="headerlink" title="ScheduledExecutorService接口"></a>ScheduledExecutorService接口</h4><p>ScheduledExecutorService扩 展ExecutorService接口并添加了schedule方法。调用schedule方法可以在指定的延时后执行一个Runnable或者 Callable任务。ScheduledExecutorService接口还定义了按照指定时间间隔定期执行任务的 scheduleAtFixedRate方法和scheduleWithFixedDelay方法。</p>
<h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>在java.util.concurrent包中多数的执行器实现都使用了由工作线程组成的线程池，工作线程独立于所它所执行的Runnable任务和Callable任务，并且常用来执行多个任务。 使用工作线程可以使创建线程的开销最小化。</p>
<p>在大规模并发应用中，创建大量的Thread对象会占用占用大量系统内存，分配和回收这些对象会产生很大的开销。一种最常见的线程池是固定大小的 线程池。这种线程池始终有一定数量的线程在运行，如果一个线程由于某种原因终止运行了，线程池会自动创建一个新的线程来代替它。需要执行的任务通过一个内 部队列提交给线程，当没有更多的工作线程可以用来执行任务时，队列保存额外的任务。 使用固定大小的线程池一个很重要的好处是可以实现优雅退化。例如一个Web服务器，每一个HTTP请求都是由一个单独的线程来处理的，如果为每一个 HTTP都创建一个新线程，那么当系统的开销超出其能力时，会突然地对所有请求都停止响应。如果限制Web服务器可以创建的线程数量，那么它就不必立即处 理所有收到的请求，而是在有能力处理请求时才处理。 创建一个使用线程池的执行器最简单的方法是调用java.util.concurrent.Executors的newFixedThreadPool方法。Executors类还提供了下列一下方法：</p>
<pre><code>* newCachedThreadPool方法创建了一个可扩展的线程池。适合用来启动很多短任务的应用程序。
* newSingleThreadExecutor方法创建了每次执行一个任务的执行器。
* 还有一些创建ScheduledExecutorService执行器的方法。
</code></pre><p>如果上面的方法都不满足需要，可以尝试java.util.concurrent.ThreadPoolExecutor或者java.util.concurrent.ScheduledThreadPoolExecutor。</p>
<h3 id="Fork-Joint"><a href="#Fork-Joint" class="headerlink" title="Fork/Joint"></a>Fork/Joint</h3><p>fork/join框架是ExecutorService接口的一种具体实现，目的是为了帮助你更好地利用多处理器带来的好处。它是为那些能够被 递归地拆解成子任务的工作类型量身设计的。其目的在于能够使用所有可用的运算能力来提升你的应用的性能。   类似于ExecutorService接口的其他实现，fork/join框架会将任务分发给线程池中的工作线程。fork/join框架的独特之处在与 它使用工作窃取(work-stealing)算法。完成自己的工作而处于空闲的工作线程能够从其他仍然处于忙碌(busy)状态的工作线程处窃取等待执 行的任务。 fork/join框架的核心是ForkJoinPool类，它是对AbstractExecutorService类的扩展。ForkJoinPool实现了工作偷取算法，并可以执行ForkJoinTask任务。</p>
<h4 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h4><p>使用fork/join框架的第一步是编写执行一部分工作的代码。你的代码结构看起来应该与下面所示的伪代码类似：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (当前这个任务工作量足够小)  </span><br><span class="line">    直接完成这个任务  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">    将这个任务或这部分工作分解成两个部分  </span><br><span class="line">    分别触发(invoke)这两个子任务的执行，并等待结果</span><br></pre></td></tr></table></figure>
<p>你需要将这段代码包裹在一个ForkJoinTask的子类中。不过，通常情况下会使用一种更为具体的的类型，或者是RecursiveTask(会返回一个结果)，或者是RecursiveAction。 当你的ForkJoinTask子类准备好了，创建一个代表所有需要完成工作的对象，然后将其作为参数传递给一个ForkJoinPool实例的invoke()方法即可。</p>
<h4 id="要清晰，先模糊"><a href="#要清晰，先模糊" class="headerlink" title="要清晰，先模糊"></a>要清晰，先模糊</h4><p>想要了解fork/join框架的基本工作原理，接下来的这个例子会有所帮助。假设你想要模糊一张图片。原始的source图片由一个整数的数组 表示，每个整数表示一个像素点的颜色数值。与source图片相同，模糊之后的destination图片也由一个整数数组表示。 对图片的模糊操作是通过对source数组中的每一个像素点进行处理完成的。处理的过程是这样的：将每个像素点的色值取出，与周围像素的色值（红、黄、蓝 三个组成部分）放在一起取平均值，得到的结果被放入destination数组。因为一张图片会由一个很大的数组来表示，这个流程会花费一段较长的时间。 如果使用fork/join框架来实现这个模糊算法，你就能够借助多处理器系统的并行处理能力。下面是上述算法结合fork/join框架的一种简单实 现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkBlur</span> <span class="keyword">extends</span> <span class="title">RecursiveAction</span> </span>&#123;  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] mSource;  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mStart;  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mLength;  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] mDestination;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Processing window size; should be odd.  </span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mBlurWidth = <span class="number">15</span>;  </span><br><span class="line">  </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">ForkBlur</span><span class="params">(<span class="keyword">int</span>[] src, <span class="keyword">int</span> start, <span class="keyword">int</span> length, <span class="keyword">int</span>[] dst)</span> </span>&#123;  </span><br><span class="line">     mSource = src;  </span><br><span class="line">     mStart = start;  </span><br><span class="line">     mLength = length;  </span><br><span class="line">     mDestination = dst;  </span><br><span class="line"> &#125;  </span><br><span class="line">   </span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">computeDirectly</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">     <span class="keyword">int</span> sidePixels = (mBlurWidth - <span class="number">1</span>) / <span class="number">2</span>;  </span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> index = mStart; index &amp;lt; mStart + mLength; index++) &#123;  </span><br><span class="line">         <span class="comment">// Calculate average.  </span></span><br><span class="line">         <span class="keyword">float</span> rt = <span class="number">0</span>, gt = <span class="number">0</span>, bt = <span class="number">0</span>;  </span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> mi = -sidePixels; mi &amp;lt;= sidePixels; mi++) &#123;  </span><br><span class="line">             <span class="keyword">int</span> mindex = Math.min(Math.max(mi + index, <span class="number">0</span>),  </span><br><span class="line">                                 mSource.length - <span class="number">1</span>);  </span><br><span class="line">             <span class="keyword">int</span> pixel = mSource[mindex];  </span><br><span class="line">             rt += (<span class="keyword">float</span>)((pixel &amp;amp; <span class="number">0x00ff0000</span>) &amp;gt;&amp;gt; <span class="number">16</span>)  </span><br><span class="line">                   / mBlurWidth;  </span><br><span class="line">             gt += (<span class="keyword">float</span>)((pixel &amp;amp; <span class="number">0x0000ff00</span>) &amp;gt;&amp;gt;  <span class="number">8</span>)  </span><br><span class="line">                   / mBlurWidth;  </span><br><span class="line">             bt += (<span class="keyword">float</span>)((pixel &amp;amp; <span class="number">0x000000ff</span>) &amp;gt;&amp;gt;  <span class="number">0</span>)  </span><br><span class="line">                   / mBlurWidth;  </span><br><span class="line">         &#125;  </span><br><span class="line">   </span><br><span class="line">         <span class="comment">// Reassemble destination pixel.  </span></span><br><span class="line">         <span class="keyword">int</span> dpixel = (<span class="number">0xff000000</span>     ) |  </span><br><span class="line">                (((<span class="keyword">int</span>)rt) &amp;lt;&amp;lt; <span class="number">16</span>) |  </span><br><span class="line">                (((<span class="keyword">int</span>)gt) &amp;lt;&amp;lt;  <span class="number">8</span>) |  </span><br><span class="line">                (((<span class="keyword">int</span>)bt) &amp;lt;&amp;lt;  <span class="number">0</span>);  </span><br><span class="line">         mDestination[index] = dpixel;  </span><br><span class="line">     &#125;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>接下来你需要实现父类中的compute()方法，它会直接执行模糊处理，或者将当前的工作拆分成两个更小的任务。数组的长度可以作为一个简单的阀值来判断任务是应该直接完成还是应该被拆分。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">int</span> sThreshold = <span class="number">100000</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (mLength &amp;lt; sThreshold) &#123;  </span><br><span class="line">        computeDirectly();  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">int</span> split = mLength / <span class="number">2</span>;  </span><br><span class="line">   </span><br><span class="line">     invokeAll(<span class="keyword">new</span> ForkBlur(mSource, mStart, split, mDestination),  </span><br><span class="line">               <span class="keyword">new</span> ForkBlur(mSource, mStart + split, mLength - split,  </span><br><span class="line">                            mDestination));  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>如果前面这个方法是在一个RecursiveAction的子类中，那么设置任务在ForkJoinPool中执行就再直观不过了。通常会包含以下一些步骤：</p>
<p>(1) 创建一个表示所有需要完成工作的任务。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// source image pixels are in src  </span></span><br><span class="line"><span class="comment">// destination image pixels are in dst  </span></span><br><span class="line">ForkBlur fb = <span class="keyword">new</span> ForkBlur(src, <span class="number">0</span>, src.length, dst);</span><br></pre></td></tr></table></figure>
<p>(2) 创建将要用来执行任务的ForkJoinPool。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ForkJoinPool pool = <span class="keyword">new</span> ForkJoinPool();</span><br></pre></td></tr></table></figure>
<p>(3) 执行任务。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pool.invoke(fb);</span><br></pre></td></tr></table></figure>
<p>想要浏览完成的源代码，请查看ForkBlur，其中还包含一些创建destination图片文件的额外代码。</p>
<h4 id="标准实现"><a href="#标准实现" class="headerlink" title="标准实现"></a>标准实现</h4><p>除了能够使用fork/join框架来实现能够在多处理系统中被并行执行的定制化算法（如前文中的ForkBlur.java例子），在Java SE中一些比较常用的功能点也已经使用fork/join框架来实现了。在Java SE 8中，java.util.Arrays类的一系列parallelSort()方法就使用了fork/join来实现。这些方法与sort()系列方法 很类似，但是通过使用fork/join框架，借助了并发来完成相关工作。在多处理器系统中，对大数组的并行排序会比串行排序更快。这些方法究竟是如何运 用fork/join框架并不在本教程的讨论范围内。想要了解更多的信息，请参见Java API文档。 其他采用了fork/join框架的方法还包括java.util.streams包中的一些方法，此包是作为Java SE 8发行版中Project Lambda的一部分。想要了解更多信息，请参见Lambda Expressions一节。</p>
<h3 id="并发集合"><a href="#并发集合" class="headerlink" title="并发集合"></a>并发集合</h3><p>java.util.concurrent包囊括了Java集合框架的一些附加类。它们也最容易按照集合类所提供的接口来进行分类：</p>
<pre><code>* BlockingQueue定义了一个先进先出的数据结构，当你尝试往满队列中添加元素，或者从空队列中获取元素时，将会阻塞或者超时。
* ConcurrentMap是java.util.Map的子接口，定义了一些有用的原子操作。移除或者替换键值对的操作只有当key存在时才能进行，而新增操作只有当key不存在时。使这些操作原子化，可以避免同步。ConcurrentMap的标准实现是ConcurrentHashMap，它是HashMap的并发模式。
* ConcurrentNavigableMap是ConcurrentMap的子接口，支持近似匹配。ConcurrentNavigableMap的标准实现是ConcurrentSkipListMap，它是TreeMap的并发模式。
* 所有这些集合，通过 在集合里新增对象和访问或移除对象的操作之间，定义一个happens-before的关系，来帮助程序员避免内存一致性错误。
</code></pre><h3 id="原子变量"><a href="#原子变量" class="headerlink" title="原子变量"></a>原子变量</h3><p>java.util.concurrent.atomic包 定义了对单一变量进行原子操作的类。所有的类都提供了get和set方法，可以使用它们像读写volatile变量一样读写原子类。就是说，同一变量上的 一个set操作对于任意后续的get操作存在happens-before关系。原子的compareAndSet方法也有内存一致性特点，就像应用到整 型原子变量中的简单原子算法。   为了看看这个包如何使用，让我们返回到最初用于演示线程干扰的Counter类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> c = <span class="number">0</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        c++;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        c--;  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">         <span class="keyword">return</span> c;  </span><br><span class="line">     &#125;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>使用同步是一种使Counter类变得线程安全的方法，如SynchronizedCounter：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SynchronizedCounter</span> </span>&#123;  </span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> c = <span class="number">0</span>;  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">		c++;  </span><br><span class="line">	&#125;  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">		c--;  </span><br><span class="line">	&#125;  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">		<span class="keyword">return</span> c;  </span><br><span class="line">	&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于这个简单的类，同步是一种可接受的解决方案。但是对于更复杂的类，我们可能想要避免不必要同步所带来的活跃度影响。将int替换为AtomicInteger允许我们在不进行同步的情况下阻止线程干扰，如AtomicCounter：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AtomicCounter</span> </span>&#123;  </span><br><span class="line">	<span class="keyword">private</span> AtomicInteger c = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">	c.incrementAndGet();  </span><br><span class="line">	&#125;  </span><br><span class="line">	  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">		c.decrementAndGet();  </span><br><span class="line">	&#125;  </span><br><span class="line">	   </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">		<span class="keyword">return</span> c.get();</span><br><span class="line">	&#125;			</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="并发随机数"><a href="#并发随机数" class="headerlink" title="并发随机数"></a>并发随机数</h3><p>在JDK7中，java.util.concurrent包含了一个相当便利的类，ThreadLocalRandom，当应用程序期望在多个线程或ForkJoinTasks中使用随机数时。</p>
<p>对于并发访问，使用TheadLocalRandom代替Math.random()可以减少竞争，从而获得更好的性能。</p>
<p>你只需调用ThreadLocalRandom.current()， 然后调用它的其中一个方法去获取一个随机数即可。下面是一个例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> r = ThreadLocalRandom.current().nextInt(<span class="number">4</span>,<span class="number">77</span>);</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li>ifeve: <a href="http://ifeve.com/oracle-java-concurrency-tutorial/" target="_blank" rel="external">http://ifeve.com/oracle-java-concurrency-tutorial/</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[修改Gradle缓存目录]]></title>
      <url>http://facingsea.com/2014/11/26/gradle-change-cache-directory/</url>
      <content type="html"><![CDATA[<p>修改Gradle目录有两种方式：</p>
<p>方式一、添加GRADLE_USER_HOME环境变量</p>
<p>方式二、可以在使用gradle命令时添加—gradle-user-home参数指定目录</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[禁用浏览器鼠标右键]]></title>
      <url>http://facingsea.com/2013/10/14/js-disable-right-click-menu-in-broswer/</url>
      <content type="html"><![CDATA[<p>代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">document</span>.oncontentmenu = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(e.preventDefault)&#123;</span><br><span class="line">			e.preventDefault();</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			e.returnValue = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>preventDefault是火狐<br>returnVal=false是IE浏览器的</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[鼠标移动到表格行变色]]></title>
      <url>http://facingsea.com/2013/05/12/js-mouse-to-table-change-color/</url>
      <content type="html"><![CDATA[<p>首先需要定义改变前后的颜色：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.over</span> &#123; <span class="attribute">background-color </span>: <span class="number">#EFEFEF</span>;<span class="attribute">color</span>:<span class="number">#FFFFFF</span>;&#125;</span><br><span class="line"><span class="selector-class">.out</span> &#123; <span class="attribute">background-color</span>: <span class="number">#ffffff</span>; <span class="attribute">color</span>: <span class="number">#000000</span>;&#125;</span><br></pre></td></tr></table></figure></p>
<p>在表格中的<tr>标签中添加<code>onMouseOver</code>和<code>onMouseOut</code>，如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">onMouseOver</span>=<span class="string">"this.className='over'"</span> <span class="attr">onMouseOut</span>=<span class="string">"this.className='out'"</span> &gt;</span>...<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure></tr></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ajax的post请求出现乱码问题]]></title>
      <url>http://facingsea.com/2013/04/30/ajax-post-info-is-garbled/</url>
      <content type="html"><![CDATA[<p>如ajax请求如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.post(<span class="string">"$&#123;pageContext.request.contextPath&#125;/DeleteDocServlet?docid=$&#123;map.docid&#125;&amp;docType=$&#123;map.docType&#125;"</span>, data, callback);</span><br></pre></td></tr></table></figure></p>
<p>在服务器端，通过<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getParamerter(<span class="string">"docType"</span>);</span><br></pre></td></tr></table></figure></p>
<p>将获取乱码，考虑如果将获得的值进行<code>new String()</code>的方式进行解码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> String(request.getParamerter(<span class="string">"docType"</span>).getBytes(<span class="string">"ISO8859-1"</span>),<span class="string">"UTF-8"</span>)</span><br></pre></td></tr></table></figure></p>
<p>但是这种形式取得的值仍然是乱码。</p>
<p>解决方法：</p>
<p>在Ajax中通过对中文参数进行两次URI编码，然后在服务器端通过getParameter方式获得，并对获得的值进行URI解码，这样便可以解决乱码问题，代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对中文进行编码</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="built_in">encodeURI</span>(<span class="built_in">encodeURI</span>(<span class="string">"$&#123;docType&#125;"</span> ));</span><br><span class="line">$.post( <span class="string">"$&#123;pageContext.request.contextPath&#125;/DeleteDocServlet?docid=$&#123;map.docid&#125;&amp;docType="</span> +name+<span class="string">""</span>);</span><br></pre></td></tr></table></figure></p>
<p>服务器端：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String docType = request.getParameter (<span class="string">"docType"</span> );</span><br><span class="line">docType = URLDecoder.decode(docType, <span class="string">"UTF-8"</span>);</span><br></pre></td></tr></table></figure></p>
<p>这样在服务器端即可获取中文数据。</p>
]]></content>
    </entry>
    
  
  
</search>
